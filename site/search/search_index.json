{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to VPX Game Logic Framework","text":"<p>The VPX Game Logic Framework (GLF) is a powerful and flexible framework for creating original virtual pinball tables using the VPX platform. It provides a comprehensive set of game logic components that enable you to build sophisticated pinball games without writing extensive code.</p>"},{"location":"#about-this-framework","title":"About This Framework","text":"<p>GLF is inspired by The Mission Pinball Framework for real and homebrew machines. Many of the game logic commands mirror the MPF commands, allowing for interchangeable configurations between VPX and MPF. This makes it easier to transition between virtual and physical pinball development.</p> <p>One of the key goals of this project is to provide a standalone set of game logic devices that doesn't require users to install and run the MPF bridge for VPX, simplifying the development process.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Virtual Devices: Comprehensive support for flippers, bumpers, drop targets, magnets, and more</li> <li>Game Modes: Flexible mode system for creating complex game rules and progression</li> <li>Event System: Powerful event-driven architecture for game logic</li> <li>Player Management: Track player scores, achievements, and high scores</li> <li>Light Control: Advanced lighting effects and animations</li> <li>Sound Management: Integrated sound player for game audio</li> <li>Shot Management: Configure shots, shot groups, and shot profiles</li> <li>Multiball Handling: Create and manage multiball modes</li> <li>Timer System: Precise timing control for game events</li> <li>Tilt Management: Configurable tilt behavior</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Installation: Follow the Installation Guide to set up GLF</li> <li>Tutorials: Start with our tutorial series to learn the basics</li> <li>Configuration: Explore the Game Logic documentation to understand available components</li> <li>Examples: Check out example configurations in the documentation</li> </ol>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Community: Join our community discord for support and discussion</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"autofire/","title":"Auto-Fire Configuration","text":"<p>The auto-fire configuration allows you to set up and customize auto-firing devices in your pinball machine. Auto-fire devices are used to automatically fire coils or other devices when triggered by switches or events. Examples include Pop Bumpers, Slingshots</p>"},{"location":"autofire/#configuration-options","title":"Configuration Options","text":""},{"location":"autofire/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic auto-fire configuration\nWith CreateGlfAutoFireDevice(\"left_sling\")\n    .Switch = \"s_LeftSlingshot\"\n    .ActionCallback = \"LeftSlingshotAction\"\n    .DisabledCallback = \"LeftSlingshotDisabled\"\n    .EnabledCallback = \"LeftSlingshotEnabled\"\n    .DisableEvents = Array(\"kill_flippers\")\n    .EnableEvents = Array(\"ball_started\",\"enable_flippers\")\n    .ExcludeFromBallSearch = False\nEnd With\n</code></pre>"},{"location":"autofire/#property-descriptions","title":"Property Descriptions","text":""},{"location":"autofire/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>Switch</code>: String name of the switch that triggers the auto-fire (Default: Empty)</li> <li><code>ActionCallback</code>: String name of the callback function that executes when the auto-fire is triggered (Default: Empty)</li> <li><code>EnabledCallback</code>: String name of the callback function that executes when the auto-fire is enabled (Default: Empty)</li> <li><code>DisabledCallback</code>: String name of the callback function that executes when the auto-fire is disabled (Default: Empty)</li> </ul>"},{"location":"autofire/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the auto-fire (Default: Array(\"ball_started\"))</li> <li><code>DisableEvents</code>: Array of event names that will disable the auto-fire (Default: Array(\"ball_will_end\", \"service_mode_entered\"))</li> </ul>"},{"location":"autofire/#ball-search-settings","title":"Ball Search Settings","text":"<ul> <li><code>ExcludeFromBallSearch</code>: Boolean indicating whether to exclude this device from ball search operations (Default: False)</li> </ul>"},{"location":"autofire/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"autofire/#events","title":"Events","text":"<p>The auto-fire device system generates several events that you can listen to:</p> <ul> <li><code>auto_fire_coil_{device_name}_activate</code>: Triggered when the auto-fire device is activated</li> <li><code>auto_fire_coil_{device_name}_deactivate</code>: Triggered when the auto-fire device is deactivated</li> </ul> <p>Replace <code>{device_name}</code> with your actual auto-fire device name.</p>"},{"location":"autofire/#default-behavior","title":"Default Behavior","text":"<p>By default, auto-fire devices are configured with: - Enabled on <code>ball_started</code> event - Disabled on <code>ball_will_end</code> and <code>service_mode_entered</code> events - Debug logging disabled</p>"},{"location":"ball-device/","title":"Ball Device Configuration","text":"<p>The ball device configuration allows you to set up and customize ball devices in your pinball machine. Ball devices are used for scoops, physical ball locks, staging areas. Anywhere you want to hold a ball on the table. </p>"},{"location":"ball-device/#configuration-options","title":"Configuration Options","text":""},{"location":"ball-device/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic ball device configuration\nWith CreateGlfBallDevice(\"scoop\")\n    .BallSwitches = Array(\"s_scoop1\")\n    .EjectTimemout = 2000\n    .EjectCallback = \"ScoopEjectCallback\"              ' Name of the callback function for ball device\nEnd With\n</code></pre> <p>Each device will have a <code>Eject Callback</code> setting. This calls your defined function / sub when the ball should be ejected from the device. In a real pinball machine this would be the coil firing to eject the ball. In VPX, you need to implement this function to virutally kick the ball out from the device. Below is an example of how to you could do that.</p> <pre><code>Sub ScoopEjectCallback(ball)\n    Dim ang, vel\n    If s_scoop1.BallCntOver &gt; 0 Then 'Check if the ball is positioned on the switch / kicker\n        ang = 14.8 + ScoopAngleTol*2*(rnd-0.5) 'generate some randomness to the angle\n        vel = 70.0 + ScoopStrengthTol*2*(rnd-0.5) 'generare some randomness to the velocity\n        KickBall ball, ang, vel, 0, 0 'actually kick the ball\n        SoundSaucerKick 1, s_Scoop 'play a sound to simulate the coil firing\n    Else\n        SoundSaucerKick 0, s_Scoop 'play a sound if even if the ball wasn't on the switch (failed kick)\n    End If\n    DOF 109, DOFPulse 'Optionally call a DOF event.\nEnd Sub\n</code></pre>"},{"location":"ball-device/#property-descriptions","title":"Property Descriptions","text":""},{"location":"ball-device/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>BallSwitches</code>: Array of switch names that detect balls in the device (Default: Empty Array)</li> <li><code>EjectCallback</code>: String name of the callback function that executes when the ball device ejects a ball (Default: Null)</li> </ul>"},{"location":"ball-device/#ejection-control","title":"Ejection Control","text":"<ul> <li><code>EjectTimeout</code>: Integer specifying the timeout in milliseconds for ejection (Default: 1000)</li> <li><code>EjectEnableTime</code>: Integer specifying the enable time in milliseconds for ejection (Default: 0)</li> <li><code>MechanicalEject</code>: Boolean indicating whether the device uses mechanical ejection (Default: False)</li> <li><code>DefaultDevice</code>: Boolean indicating whether this is the default ball device (Default: False)</li> <li><code>PlayerControlledEjectEvent</code>: String name of the event that triggers player-controlled ejection (Default: Empty)</li> </ul>"},{"location":"ball-device/#event-control","title":"Event Control","text":"<ul> <li><code>EjectAllEvents</code>: Array of event names that will trigger ejection of all balls (Default: Empty Array)</li> <li><code>EjectTargets</code>: Array of target names that will trigger ejection timeout when activated (Default: Empty Array)</li> </ul>"},{"location":"ball-device/#ball-tracking","title":"Ball Tracking","text":"<ul> <li><code>EntranceCountDelay</code>: Integer specifying the delay in milliseconds before counting a ball as entered (Default: 500)</li> <li><code>ExcludeFromBallSearch</code>: Boolean indicating whether to exclude this device from ball search operations (Default: False)</li> </ul>"},{"location":"ball-device/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"ball-device/#events","title":"Events","text":"<p>The ball device system generates several events that you can listen to:</p> <ul> <li><code>balldevice_{device_name}_ball_enter</code>: Relay event triggered when a ball is entering the device (can be claimed by other systems)</li> <li><code>balldevice_{device_name}_ball_entered</code>: Triggered when a ball has successfully entered the device</li> <li><code>balldevice_{device_name}_ball_exiting</code>: Triggered when a ball is exiting the device</li> <li><code>balldevice_{device_name}_ball_eject_success</code>: Triggered when a ball has been successfully ejected from the device</li> </ul> <p>Replace <code>{device_name}</code> with your actual ball device name.</p>"},{"location":"ball-device/#notes","title":"Notes","text":"<ul> <li>The ball device system automatically manages ball tracking and ejection based on configured switches</li> <li>Eject callbacks receive a ball parameter (can be Null for enable time callbacks)</li> <li>Debug logging can be enabled to track ball device state changes</li> <li>Ball devices can be configured to eject balls during specific game modes using EjectAllEvents</li> <li>The system prevents multiple ejection operations from overlapping</li> <li>Ball tracking is always enabled and managed automatically</li> <li>The entrance count delay helps prevent false ball detection</li> <li>Mechanical ejection mode uses timeouts to track successful ball exits</li> <li>Player controlled ejection allows manual triggering via events</li> <li>Eject targets can be used to trigger ejection timeouts when specific targets are hit </li> </ul>"},{"location":"ball-save/","title":"Ball Save Configuration","text":"<p>The ball save configuration allows you to set up and customize ball saving mechanisms in your pinball machine. Ball saves are used to prevent players from losing balls too quickly and can be configured to work within specific game modes.</p>"},{"location":"ball-save/#configuration-options","title":"Configuration Options","text":""},{"location":"ball-save/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic ball save configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .BallSaves(\"ball_save_name\")\n        .ActiveTime = 6000                ' Time in milliseconds the ball save is active\n        .EnableEvents = Array(\"event1\")   ' Events that enable the ball save\n    End With\nEnd With\n</code></pre>"},{"location":"ball-save/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced ball save configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .BallSaves(\"ball_save_name\")\n        ' Timing settings\n        .ActiveTime = 6000                ' Time in milliseconds the ball save is active\n        .GracePeriod = 2000               ' Additional time after active time before disabling\n        .HurryUpTime = 3000               ' Time before active time ends to enter hurry-up state\n\n        ' Event settings\n        .EnableEvents = Array(\"event1\", \"event2\")           ' Events that enable the ball save\n        .DisableEvents = Array(\"event3\", \"event4\")          ' Events that disable the ball save\n        .TimerStartEvents = Array(\"event5\", \"event6\")       ' Events that start the ball save timer\n\n        ' Ball save behavior\n        .AutoLaunch = True                ' Whether to automatically launch the saved ball\n        .BallsToSave = 2                  ' Number of balls to save before disabling\n\n        ' Debug settings\n        .Debug = True                     ' Enable debug logging for this ball save\n    End With\nEnd With\n</code></pre>"},{"location":"ball-save/#property-descriptions","title":"Property Descriptions","text":""},{"location":"ball-save/#timing-settings","title":"Timing Settings","text":"<ul> <li><code>ActiveTime</code>: Time in milliseconds the ball save is active (Default: Null)</li> <li><code>GracePeriod</code>: Additional time after active time before disabling (Default: Null)</li> <li><code>HurryUpTime</code>: Time before active time ends to enter hurry-up state (Default: Null)</li> </ul>"},{"location":"ball-save/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the ball save (Default: Empty Array)</li> <li><code>DisableEvents</code>: Array of event names that will disable the ball save (Default: Empty Array)</li> <li><code>TimerStartEvents</code>: Array of event names that will start the ball save timer (Default: Empty Array)</li> </ul>"},{"location":"ball-save/#ball-save-behavior","title":"Ball Save Behavior","text":"<ul> <li><code>AutoLaunch</code>: Boolean indicating whether to automatically launch the saved ball (Default: False)</li> <li><code>BallsToSave</code>: Integer indicating the number of balls to save before disabling (Default: 1)</li> </ul>"},{"location":"ball-save/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this ball save (Default: False)</li> </ul>"},{"location":"ball-save/#example-configurations","title":"Example Configurations","text":""},{"location":"ball-save/#basic-ball-save-example","title":"Basic Ball Save Example","text":"<pre><code>' Basic ball save configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .BallSaves(\"new_ball\")\n        .ActiveTime = 6000\n        .EnableEvents = Array(\"new_ball_active\")\n    End With\nEnd With\n</code></pre>"},{"location":"ball-save/#advanced-ball-save-example","title":"Advanced Ball Save Example","text":"<pre><code>' Advanced ball save configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .BallSaves(\"multiball_save\")\n        ' Timing settings\n        .ActiveTime = 10000\n        .GracePeriod = 3000\n        .HurryUpTime = 2000\n\n        ' Event settings\n        .EnableEvents = Array(\"multiball_started\")\n        .DisableEvents = Array(\"multiball_ended\")\n        .TimerStartEvents = Array(\"multiball_ball_launched\")\n\n        ' Ball save behavior\n        .AutoLaunch = True\n        .BallsToSave = 3\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"ball-save/#events","title":"Events","text":"<p>The ball save system generates several events that you can listen to:</p> <ul> <li><code>{ball_save_name}_enabled</code>: Triggered when the ball save is enabled</li> <li><code>{ball_save_name}_disabled</code>: Triggered when the ball save is disabled</li> <li><code>{ball_save_name}_timer_start</code>: Triggered when the ball save timer starts</li> <li><code>{ball_save_name}_grace_period</code>: Triggered when the ball save enters grace period</li> <li><code>{ball_save_name}_hurry_up</code>: Triggered when the ball save enters hurry-up state</li> <li><code>{ball_save_name}_saving_ball</code>: Triggered when a ball is being saved</li> </ul> <p>Replace <code>{ball_save_name}</code> with your actual ball save name (prefixed with \"ball_save_\" internally).</p>"},{"location":"ball-save/#default-behavior","title":"Default Behavior","text":"<p>By default, ball saves are configured with: - No active time, grace period, or hurry-up time - No enable, disable, or timer start events - Auto launch disabled - Balls to save set to 1 - Debug logging disabled</p>"},{"location":"ball-save/#notes","title":"Notes","text":"<ul> <li>Ball saves are managed within the context of a mode</li> <li>The ball save system automatically handles ball draining and replacement</li> <li>Debug logging can be enabled to track ball save operations</li> <li>The system prevents multiple ball save operations from overlapping</li> <li>Ball saves can be configured to work with specific game modes or features</li> <li>The ball save timer can be started automatically or triggered by specific events</li> <li>Grace period and hurry-up states can be used to provide visual or audio cues to the player </li> </ul>"},{"location":"combo-switches/","title":"Combo Switches Configuration","text":"<p>The combo switches configuration allows you to set up and customize combinations of switches that trigger events when activated in specific patterns. Combo switches are useful for creating complex gameplay mechanics that require multiple switches to be activated in sequence.</p>"},{"location":"combo-switches/#configuration-options","title":"Configuration Options","text":""},{"location":"combo-switches/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic combo switch configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ComboSwitches(\"combo_name\")\n        .Switch1 = \"switch1\"              ' First switch in the combo\n        .Switch2 = \"switch2\"              ' Second switch in the combo\n        .EventsWhenBoth = Array(\"event1\") ' Events triggered when both switches are active\n    End With\nEnd With\n</code></pre>"},{"location":"combo-switches/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced combo switch configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ComboSwitches(\"combo_name\")\n        ' Basic settings\n        .Switch1 = \"switch1\"              ' First switch in the combo\n        .Switch2 = \"switch2\"              ' Second switch in the combo\n\n        ' Timing settings\n        .HoldTime = 500                   ' Time in milliseconds a switch must be held to be considered active\n        .MaxOffsetTime = 1000             ' Maximum time difference between switch activations to trigger \"both\" state\n        .ReleaseTime = 300                ' Time in milliseconds a switch must be released to be considered inactive\n\n        ' Event settings\n        .EventsWhenBoth = Array(\"event1\", \"event2\")       ' Events triggered when both switches are active\n        .EventsWhenInactive = Array(\"event3\", \"event4\")   ' Events triggered when no switches are active\n        .EventsWhenOne = Array(\"event5\", \"event6\")        ' Events triggered when only one switch is active\n        .EventsWhenSwitch1 = Array(\"event7\", \"event8\")    ' Events triggered when only switch1 is active\n        .EventsWhenSwitch2 = Array(\"event9\", \"event10\")   ' Events triggered when only switch2 is active\n\n        ' Debug settings\n        .Debug = True                     ' Enable debug logging for this combo switch\n    End With\nEnd With\n</code></pre>"},{"location":"combo-switches/#property-descriptions","title":"Property Descriptions","text":""},{"location":"combo-switches/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>Switch1</code>: Name of the first switch in the combo (Default: Empty)</li> <li><code>Switch2</code>: Name of the second switch in the combo (Default: Empty)</li> </ul>"},{"location":"combo-switches/#timing-settings","title":"Timing Settings","text":"<ul> <li><code>HoldTime</code>: Time in milliseconds a switch must be held to be considered active (Default: 0)</li> <li><code>MaxOffsetTime</code>: Maximum time difference between switch activations to trigger \"both\" state (Default: -1, meaning no limit)</li> <li><code>ReleaseTime</code>: Time in milliseconds a switch must be released to be considered inactive (Default: 0)</li> </ul>"},{"location":"combo-switches/#event-control","title":"Event Control","text":"<ul> <li><code>EventsWhenBoth</code>: Array of event names triggered when both switches are active (Default: Empty Array)</li> <li><code>EventsWhenInactive</code>: Array of event names triggered when no switches are active (Default: Empty Array)</li> <li><code>EventsWhenOne</code>: Array of event names triggered when only one switch is active (Default: Empty Array)</li> <li><code>EventsWhenSwitch1</code>: Array of event names triggered when only switch1 is active (Default: Empty Array)</li> <li><code>EventsWhenSwitch2</code>: Array of event names triggered when only switch2 is active (Default: Empty Array)</li> </ul>"},{"location":"combo-switches/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this combo switch (Default: False)</li> </ul>"},{"location":"combo-switches/#example-configurations","title":"Example Configurations","text":""},{"location":"combo-switches/#basic-combo-switch-example","title":"Basic Combo Switch Example","text":"<pre><code>' Basic combo switch configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ComboSwitches(\"ramp_combo\")\n        .Switch1 = \"ramp1\"\n        .Switch2 = \"ramp2\"\n        .EventsWhenBoth = Array(\"ramp_combo_complete\")\n    End With\nEnd With\n</code></pre>"},{"location":"combo-switches/#advanced-combo-switch-example","title":"Advanced Combo Switch Example","text":"<pre><code>' Advanced combo switch configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ComboSwitches(\"multiball_combo\")\n        ' Basic settings\n        .Switch1 = \"left_ramp\"\n        .Switch2 = \"right_ramp\"\n\n        ' Timing settings\n        .HoldTime = 300\n        .MaxOffsetTime = 2000\n        .ReleaseTime = 200\n\n        ' Event settings\n        .EventsWhenBoth = Array(\"multiball_start\")\n        .EventsWhenInactive = Array(\"multiball_ended\")\n        .EventsWhenOne = Array(\"combo_partial\")\n        .EventsWhenSwitch1 = Array(\"left_ramp_complete\")\n        .EventsWhenSwitch2 = Array(\"right_ramp_complete\")\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"combo-switches/#states","title":"States","text":"<p>The combo switch system manages several states:</p> <ul> <li><code>both</code>: Both switches are active</li> <li><code>one</code>: Only one switch is active</li> <li><code>inactive</code>: No switches are active</li> <li><code>switches_1</code>: Only switch1 is active</li> <li><code>switches_2</code>: Only switch2 is active</li> </ul>"},{"location":"combo-switches/#events","title":"Events","text":"<p>The combo switch system generates several events that you can listen to:</p> <ul> <li><code>{combo_name}_switch1_active</code>: Triggered when switch1 becomes active</li> <li><code>{combo_name}_switch1_inactive</code>: Triggered when switch1 becomes inactive</li> <li><code>{combo_name}_switch2_active</code>: Triggered when switch2 becomes active</li> <li><code>{combo_name}_switch2_inactive</code>: Triggered when switch2 becomes inactive</li> </ul> <p>Replace <code>{combo_name}</code> with your actual combo switch name (prefixed with \"combo_switch_\" internally).</p>"},{"location":"combo-switches/#default-behavior","title":"Default Behavior","text":"<p>By default, combo switches are configured with: - No switches defined - No hold time, max offset time, or release time - No events for any state - Debug logging disabled</p>"},{"location":"combo-switches/#notes","title":"Notes","text":"<ul> <li>Combo switches are managed within the context of a mode</li> <li>The combo switch system automatically handles switch state transitions</li> <li>Debug logging can be enabled to track combo switch operations</li> <li>The system prevents multiple state transitions from overlapping</li> <li>Combo switches can be configured to work with specific game modes or features</li> <li>Hold time and release time can be used to create more reliable combo detection</li> <li>Max offset time can be used to create time-sensitive combo requirements </li> </ul>"},{"location":"commands/","title":"Command Referencee","text":"<p>Bla </p>"},{"location":"commands/#ball-device","title":"Ball Device","text":""},{"location":"commands/#ball-save","title":"Ball Save","text":""},{"location":"commands/#counter","title":"Counter","text":""},{"location":"commands/#diverter","title":"Diverter","text":""},{"location":"commands/#drop-target","title":"Drop Target","text":""},{"location":"commands/#event-player","title":"Event Player","text":""},{"location":"commands/#light-player","title":"Light Player","text":""},{"location":"commands/#mode","title":"Mode","text":""},{"location":"commands/#multiball-locks","title":"Multiball Locks","text":""},{"location":"commands/#multiball","title":"Multiball","text":""},{"location":"commands/#show-player","title":"Show Player","text":""},{"location":"commands/#timer","title":"Timer","text":""},{"location":"counter/","title":"Counter","text":"<p>A simple counter to monitor things like the number of times a target for switch has been hit.</p>"},{"location":"counter/#example","title":"Example","text":"<pre><code>Dim counter_pop_hits\nSet counter_pop_hits = (new Counter)(\"pop_hits\", mode_super_pops)\n\nWith counter_pop_hits\n    .EnableEvents = Array(\"mode_super_pops_started\")\n    .CountEvents = Array(\"sw30_active\", \"sw31_active\", \"sw32_active\")\n    .CountCompleteValue = 20\n    .DisableOnComplete = True\n    .ResetOnComplete = True\n    .EventsWhenComplete = Arrry(\"super_pops_qualified\")\n    .PersistState = True\nEnd With\n</code></pre> <p>In the above example we created a counter called counter_pop_hits that belongs to the mode called mode_super_pops. The counter is enabled when the mode starts and will increase its count value whenever one of the three pop bumbers are hit (sw30,sw31,sw32). Once complete, the counter will disable and reset its count and emit the event super_pops_qualified. The Persist State property means the counter will not reset between balls.</p>"},{"location":"counter/#required-setings","title":"Required Setings","text":""},{"location":"counter/#name","title":"Name","text":"<p><code>String</code></p> <p>The name of this device. Events emitted from the device will be in the format name_counter</p>"},{"location":"counter/#mode","title":"Mode","text":"<p><code>String</code></p> <p>This is the mode the counter belongs to. </p>"},{"location":"diverter/","title":"Diverter Configuration","text":"<p>The diverter configuration allows you to set up and customize diverters in your pinball machine. Diverters are used to change the path of balls by activating mechanical devices.</p>"},{"location":"diverter/#configuration-options","title":"Configuration Options","text":"<pre><code>With CreateGlfDiverter(\"lock_pin\")\n    .EnableEvents = Array(\"ball_started\")\n    .ActivateEvents = Array(\"raise_lock_pin\")\n    .DeactivateEvents = Array(\"drop_lock_pin\")\n    .ActivationTime = \"3000\"\n    .ActionCallback = \"DiverterLockPin\"\nEnd With\n</code></pre> <p>The Action Callback property needs implementing to actually move the diverter.</p> <pre><code>Sub DiverterLockPin(enabled)\n    If enabled Then\n        DiverterPin.isdropped=False\n    Else\n        DiverterPin.isdropped=True\n    End If\nEnd Sub\n</code></pre>"},{"location":"diverter/#property-descriptions","title":"Property Descriptions","text":""},{"location":"diverter/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>ActionCallback</code>: String name of the callback function that executes when the diverter activates or deactivates (Default: Empty)</li> </ul>"},{"location":"diverter/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the diverter (Default: Empty Array)</li> <li><code>DisableEvents</code>: Array of event names that will disable the diverter (Default: Empty Array)</li> <li><code>ActivateEvents</code>: Array of event names that will activate the diverter (Default: Empty Array)</li> <li><code>DeactivateEvents</code>: Array of event names that will deactivate the diverter (Default: Empty Array)</li> </ul>"},{"location":"diverter/#timing-settings","title":"Timing Settings","text":"<ul> <li><code>ActivationTime</code>: Integer specifying how long to hold the diverter active in milliseconds (Default: 0)</li> </ul>"},{"location":"diverter/#switch-settings","title":"Switch Settings","text":"<ul> <li><code>ActivationSwitches</code>: Array of switch names that will activate the diverter when triggered (Default: Empty Array)</li> </ul>"},{"location":"diverter/#ball-search-settings","title":"Ball Search Settings","text":"<ul> <li><code>BallSearchHoldTime</code>: Integer specifying how long to hold the diverter during ball search in milliseconds (Default: 1000)</li> <li><code>ExcludeFromBallSearch</code>: Boolean indicating whether to exclude this device from ball search operations (Default: False)</li> </ul>"},{"location":"diverter/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"diverter/#events","title":"Events","text":"<p>The diverter system generates several events that you can listen to:</p> <ul> <li><code>diverter_{device_name}_activating</code>: Triggered when the diverter is being activated</li> <li><code>diverter_{device_name}_deactivating</code>: Triggered when the diverter is being deactivated</li> </ul> <p>Replace <code>{device_name}</code> with your actual diverter name.</p>"},{"location":"diverter/#default-behavior","title":"Default Behavior","text":"<p>By default, diverters are configured with: - No enable/disable events - No activation/deactivation events - No activation switches - Activation time of 0 milliseconds - Ball search hold time of 1000 milliseconds - Debug logging disabled - Not excluded from ball search</p>"},{"location":"diverter/#notes","title":"Notes","text":"<ul> <li>The diverter system automatically manages enable/disable states based on configured events</li> <li>Action callbacks receive a parameter indicating the state (1 for activate, 0 for deactivate)</li> <li>Debug logging can be enabled to track diverter state changes</li> <li>Ball search functionality is available for troubleshooting</li> <li>Diverters can be configured to automatically deactivate after a specified time</li> <li>Activation switches provide direct control without requiring events</li> <li>The system prevents multiple activation/deactivation operations from overlapping </li> </ul>"},{"location":"dof-player/","title":"DOF Player Configuration","text":"<p>The DOF player configuration allows you to set up and customize Direct Output Framework (DOF) events in your pinball machine. DOF players are used to trigger physical feedback effects like solenoids, motors, and other physical outputs.</p>"},{"location":"dof-player/#configuration-options","title":"Configuration Options","text":""},{"location":"dof-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic DOF player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .DofPlayer\n        With .EventName(\"dof_event\")\n            .DOFEvent = 123  ' DOF event number\n            .Action = \"DOF_ON\"  ' Action to perform\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"dof-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced DOF player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .DofPlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure DOF events\n        With .EventName(\"flipper_event\")\n            .DOFEvent = 10\n            .Action = \"DOF_PULSE\"\n        End With\n\n        With .EventName(\"bumper_event\")\n            .DOFEvent = 20\n            .Action = \"DOF_ON\"\n        End With\n\n        With .EventName(\"motor_event\")\n            .DOFEvent = 30\n            .Action = \"DOF_OFF\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"dof-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"dof-player/#dof-event-settings","title":"DOF Event Settings","text":"<ul> <li><code>DOFEvent</code>: The DOF event number to trigger (Default: Empty)</li> <li><code>Action</code>: The action to perform on the DOF event (Default: Empty)</li> <li><code>DOF_OFF</code>: Turn off the output (value: 0)</li> <li><code>DOF_ON</code>: Turn on the output (value: 1)</li> <li><code>DOF_PULSE</code>: Pulse the output (value: 2)</li> <li><code>Debug</code>: Boolean to enable debug logging for this DOF player (Default: False)</li> </ul>"},{"location":"dof-player/#example-configurations","title":"Example Configurations","text":""},{"location":"dof-player/#basic-dof-player-example","title":"Basic DOF Player Example","text":"<pre><code>' Basic DOF player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .DofPlayer\n        With .EventName(\"flipper_event\")\n            .DOFEvent = 10\n            .Action = \"DOF_PULSE\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"dof-player/#advanced-dof-player-example","title":"Advanced DOF Player Example","text":"<pre><code>' Advanced DOF player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .DofPlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure DOF events\n        With .EventName(\"jackpot_event\")\n            .DOFEvent = 100\n            .Action = \"DOF_PULSE\"\n        End With\n\n        With .EventName(\"special_event\")\n            .DOFEvent = 200\n            .Action = \"DOF_ON\"\n        End With\n\n        With .EventName(\"reset_event\")\n            .DOFEvent = 300\n            .Action = \"DOF_OFF\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"dof-player/#dof-player-system","title":"DOF Player System","text":"<p>The DOF player system manages physical output events with the following features:</p> <ul> <li>DOF events can be configured with different actions (ON, OFF, PULSE)</li> <li>DOF players are managed within the context of a mode</li> <li>Events are triggered when the corresponding event is fired</li> </ul>"},{"location":"dof-player/#events","title":"Events","text":"<p>The DOF player system responds to events by triggering the configured DOF events with the specified actions.</p>"},{"location":"dof-player/#default-behavior","title":"Default Behavior","text":"<p>By default, DOF players are configured with: - No events defined - Debug logging disabled</p>"},{"location":"dof-player/#notes","title":"Notes","text":"<ul> <li>DOF players are managed within the context of a mode</li> <li>The DOF player system automatically handles event activation and deactivation</li> <li>Debug logging can be enabled to track DOF player operations</li> <li>DOF players can be configured to work with specific game modes or features</li> <li>The <code>DOFEvent</code> property specifies which DOF event to trigger</li> <li>The <code>Action</code> property determines what action to take on the DOF event</li> <li>DOF events are triggered when the corresponding event is fired</li> <li>The system uses the VPX DOF function to trigger physical outputs </li> </ul>"},{"location":"drop-target/","title":"Drop Target Configuration","text":"<p>The drop target configuration allows you to set up and customize drop targets in your pinball machine. Drop targets are interactive targets that can be knocked down and reset, often used in banks or groups.</p>"},{"location":"drop-target/#configuration-options","title":"Configuration Options","text":""},{"location":"drop-target/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic drop target configuration\nWith CreateGlfDropTarget(\"droptarget_name\")\n    .Switch = \"s_droptarget_switch\"       ' Name of the switch that detects when the target is hit\n    .Coil = \"c_droptarget_coil\"           ' Name of the coil to reset the target\n    .ActionCallback = \"DropTargetAction\"  ' Name of the callback function for drop target actions\nEnd With\n</code></pre>"},{"location":"drop-target/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced drop target configuration\nWith CreateGlfDropTarget(\"droptarget_name\")\n    ' Basic settings\n    .Switch = \"s_droptarget_switch\"\n    .Coil = \"c_droptarget_coil\"\n    .ActionCallback = \"DropTargetAction\"\n\n    ' Event settings\n    .EnableEvents = Array(\"ball_started\")                    ' Events that enable the drop target\n    .DisableEvents = Array(\"ball_will_end\", \"service_mode\")  ' Events that disable the drop target\n    .ResetEvents = Array(\"event1\", \"event2\")                 ' Events that reset the drop target\n\n    ' Ball search settings\n    .BallSearchEvents = Array(\"ball_search_started\")         ' Events that trigger ball search\n    .BallSearchDelay = 500                                   ' Delay before ball search reset\n\n    ' Debug settings\n    .Debug = True                                           ' Enable debug logging for this device\nEnd With\n</code></pre>"},{"location":"drop-target/#property-descriptions","title":"Property Descriptions","text":""},{"location":"drop-target/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>Switch</code>: String name of the switch that detects when the target is hit (Default: Empty)</li> <li><code>Coil</code>: String name of the coil to reset the target (Default: Empty)</li> <li><code>ActionCallback</code>: String name of the callback function that executes when the drop target is hit or reset (Default: Empty)</li> </ul>"},{"location":"drop-target/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the drop target (Default: Array(\"ball_started\"))</li> <li><code>DisableEvents</code>: Array of event names that will disable the drop target (Default: Array(\"ball_will_end\", \"service_mode_entered\"))</li> <li><code>ResetEvents</code>: Array of event names that will reset the drop target (Default: Array(\"machine_reset_phase_3\", \"ball_starting\"))</li> </ul>"},{"location":"drop-target/#ball-search-settings","title":"Ball Search Settings","text":"<ul> <li><code>BallSearchEvents</code>: Array of event names that will trigger ball search (Default: Array(\"ball_search_started\"))</li> <li><code>BallSearchDelay</code>: Integer specifying the delay in milliseconds before reset during ball search (Default: 500)</li> </ul>"},{"location":"drop-target/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"drop-target/#example-configurations","title":"Example Configurations","text":""},{"location":"drop-target/#basic-drop-target-example","title":"Basic Drop Target Example","text":"<pre><code>' Basic drop target configuration\nWith CreateGlfDropTarget(\"target1\")\n    .Switch = \"s_target1\"\n    .Coil = \"c_target1\"\n    .ActionCallback = \"TargetAction\"\nEnd With\n</code></pre>"},{"location":"drop-target/#advanced-drop-target-example","title":"Advanced Drop Target Example","text":"<pre><code>' Advanced drop target configuration\nWith CreateGlfDropTarget(\"bank1\")\n    .Switch = \"s_bank1\"\n    .Coil = \"c_bank1\"\n    .ActionCallback = \"BankAction\"\n    .EnableEvents = Array(\"multiball_started\")\n    .DisableEvents = Array(\"multiball_ended\")\n    .ResetEvents = Array(\"bank_reset\")\n    .BallSearchEvents = Array(\"ball_search_started\", \"ball_search_ended\")\n    .BallSearchDelay = 750\n    .Debug = True\nEnd With\n</code></pre>"},{"location":"drop-target/#callback-examples","title":"Callback Examples","text":""},{"location":"drop-target/#basic-drop-target-callback","title":"Basic Drop Target Callback","text":"<pre><code>' Basic drop target callback\nSub DropTargetAction(State)\n    ' Code to handle drop target action\n    If State = 1 Then\n        ' Drop target is being hit\n        PlaySound \"target_sound\"\n    ElseIf State = 0 Then\n        ' Drop target is being reset\n        PlaySound \"reset_sound\"\n    End If\nEnd Sub\n</code></pre>"},{"location":"drop-target/#advanced-drop-target-callback","title":"Advanced Drop Target Callback","text":"<pre><code>' Advanced drop target callback with additional logic\nSub DropTargetAction(State)\n    If State = 1 Then\n        ' Drop target is being hit\n        PlaySound \"target_sound\"\n        LightOn \"l_target_hit\"\n\n        ' Add score\n        AddScore 1000\n\n        ' Check if all targets are down\n        CheckAllTargetsDown\n    ElseIf State = 0 Then\n        ' Drop target is being reset\n        PlaySound \"reset_sound\"\n        LightOff \"l_target_hit\"\n    End If\nEnd Sub\n</code></pre>"},{"location":"drop-target/#events","title":"Events","text":"<p>The drop target system generates several events that you can listen to:</p> <ul> <li><code>{droptarget_name}_hit</code>: Triggered when the drop target is hit</li> <li><code>{droptarget_name}_resetting</code>: Triggered when the drop target is being reset</li> <li><code>{droptarget_name}_reset</code>: Triggered when the drop target has been reset</li> <li><code>{droptarget_name}_enabled</code>: Triggered when the drop target is enabled</li> <li><code>{droptarget_name}_disabled</code>: Triggered when the drop target is disabled</li> </ul> <p>Replace <code>{droptarget_name}</code> with your actual drop target name (prefixed with \"droptarget_\" internally).</p>"},{"location":"drop-target/#default-behavior","title":"Default Behavior","text":"<p>By default, drop targets are configured with: - Enabled on <code>ball_started</code> event - Disabled on <code>ball_will_end</code> and <code>service_mode_entered</code> events - Reset on <code>machine_reset_phase_3</code> and <code>ball_starting</code> events - Ball search triggered on <code>ball_search_started</code> event - Ball search delay of 500 milliseconds - Debug logging disabled</p>"},{"location":"drop-target/#notes","title":"Notes","text":"<ul> <li>The drop target system automatically manages enable/disable states based on configured events</li> <li>Action callbacks receive a parameter indicating the state (1 for hit, 0 for reset)</li> <li>Debug logging can be enabled to track drop target state changes</li> <li>Drop targets can be configured to reset during ball search with a configurable delay</li> <li>The system prevents multiple reset operations from overlapping</li> <li>Drop targets can be used individually or in banks for more complex gameplay </li> </ul>"},{"location":"environment-setup/","title":"Environment Setup","text":"<p>This framework can be used by simply including the script within the VPX script editor. However, we recommend a modern workflow for developing tables that uses Git source control and script separation. This approach makes development faster, less error-prone, and more collaborative.</p>"},{"location":"environment-setup/#tools-you-will-need","title":"Tools You Will Need","text":"<ul> <li>Git (for version control)</li> <li>VS Code (for editing code)</li> <li>Node.js (for running build scripts)</li> </ul> <p>Note: This guide does not cover installing these tools, as there are many excellent guides available online for each one.</p>"},{"location":"environment-setup/#vpx-tool","title":"VPX Tool","text":"<p>You will also need vpxtool by francisdb (GitHub link). At the time of writing, this workflow uses version 0.13.0 (download here).</p> <p>Download and install vpxtool, then make sure it is available on your command line by adding it to your system's PATH environment variable.</p>"},{"location":"environment-setup/#cloning-the-example-table","title":"Cloning the Example Table","text":"<ol> <li> <p>Clone the example table repository: https://github.com/mpcarr/vpx-example-glf</p> </li> <li> <p>Open the project in VS Code.</p> </li> <li> <p>Open a terminal in VS Code.</p> </li> <li> <p>Navigate to the scripts directory: <code>cd scripts</code></p> </li> <li> <p>Install the Node.js dependencies: <code>npm install</code></p> </li> <li> <p>Rename the project and reset git history: <code>npm run rename-project -- NEW_NAME --git</code>    This uses script to rename the example table to your new project name. The optional --git command will reset the git commit history so you have a clean repo for your new project.</p> </li> <li> <p>Build the VPX file: <code>npm run assemble-vpx</code>    This uses vpxtool to build the VPX file from the repository. You sould now have a <code>MyProjectName.vpx</code> file in your local directory.</p> </li> <li> <p>Start the script watcher: <code>npm run script-watcher</code>    This will start a file watcher process that automatically rebuilds the table script used by VPX whenever you make changes. Any edits you make to the scripts will now be automatically updated. To cancel the watch you can press Ctrl+C within the terminal window.</p> </li> <li> <p>Open the VPX table and press Play!</p> </li> </ol> <p>You are now ready to develop and test your VPX GLF table with a modern, efficient workflow.</p>"},{"location":"event-player/","title":"Event Player Configuration","text":"<p>The event player configuration allows you to set up and customize event mapping and playback in your pinball machine. Event players are useful for creating complex event chains where one event can trigger multiple other events, with optional conditions.</p>"},{"location":"event-player/#configuration-options","title":"Configuration Options","text":""},{"location":"event-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic event player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        .Add \"trigger_event\", Array(\"event1\", \"event2\") ' When trigger_event occurs, play event1 and event2\n    End With\nEnd With\n</code></pre>"},{"location":"event-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced event player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        ' Map multiple trigger events to their corresponding response events\n        .Add \"trigger_event1\", Array(\"response_event1\", \"response_event2\")\n        .Add \"trigger_event2\", Array(\"response_event3\", \"response_event4\")\n\n        ' Debug settings\n        .Debug = True ' Enable debug logging for this event player\n    End With\nEnd With\n</code></pre>"},{"location":"event-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"event-player/#event-mapping","title":"Event Mapping","text":"<ul> <li><code>Add(key, value)</code>: Maps a trigger event to an array of response events</li> <li><code>key</code>: The trigger event name</li> <li><code>value</code>: Array of response event names to be played when the trigger event occurs</li> </ul>"},{"location":"event-player/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this event player (Default: False)</li> </ul>"},{"location":"event-player/#example-configurations","title":"Example Configurations","text":""},{"location":"event-player/#basic-event-player-example","title":"Basic Event Player Example","text":"<pre><code>' Basic event player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        .Add \"ramp_complete\", Array(\"ramp_award\", \"ramp_light\")\n    End With\nEnd With\n</code></pre>"},{"location":"event-player/#advanced-event-player-example","title":"Advanced Event Player Example","text":"<pre><code>' Advanced event player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        ' Map multiple trigger events to their corresponding response events\n        .Add \"left_ramp_complete\", Array(\"left_ramp_award\", \"left_ramp_light\")\n        .Add \"right_ramp_complete\", Array(\"right_ramp_award\", \"right_ramp_light\")\n        .Add \"multiball_start\", Array(\"multiball_light\", \"multiball_sound\", \"multiball_effect\")\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"event-player/#event-handling","title":"Event Handling","text":"<p>The event player system works by:</p> <ol> <li>Listening for trigger events specified in the configuration</li> <li>When a trigger event occurs, it plays all the response events associated with that trigger</li> <li>Events are played in the order they appear in the array</li> <li>The event player automatically handles event registration and cleanup when the mode is activated or deactivated</li> </ol>"},{"location":"event-player/#events","title":"Events","text":"<p>The event player system doesn't generate its own events, but it listens for and responds to events defined in your configuration. When a trigger event occurs, the event player will automatically dispatch all the response events associated with that trigger.</p>"},{"location":"event-player/#default-behavior","title":"Default Behavior","text":"<p>By default, event players are configured with: - No event mappings - Debug logging disabled</p>"},{"location":"event-player/#notes","title":"Notes","text":"<ul> <li>Event players are managed within the context of a mode</li> <li>The event player system automatically handles event registration and cleanup</li> <li>Debug logging can be enabled to track event player operations</li> <li>Event players can be used to create complex event chains</li> <li>Event players can be configured to work with specific game modes or features</li> <li>The event player system is useful for creating reusable event patterns</li> <li>Event players can be used to simplify complex event handling logic </li> </ul>"},{"location":"events/","title":"Events System","text":"<p>The VPX GLF works on an events based system. All the devices emit and listen to events posted via the commands below</p>"},{"location":"events/#add-pin-event-listener","title":"Add Pin Event Listener","text":"<p>Used to add an event listener. Parameters are:</p> <ul> <li>Event: The event you want to listen to</li> <li>Key: A unqiue key for this event</li> <li>Callback: The function to call when this event fires</li> <li>Priority: The priority the callback should be fired in relation to other callbacks for this event. (Higher priority will be called first)</li> <li>Arguments: Anything to be passed along to the callback function when this event fires.</li> </ul>"},{"location":"events/#example","title":"Example","text":"<pre><code>AddPinEventListener \"sw01_active\", \"switch01Active\", \"HandleSwitchHit\", 1000, Null\n\nSub HandleSwitchHit(args)\n    Dim listenerArgs, dispatchArgs\n    listenerArgs = args(0)\n    dispatchArgs = args(1)\nEnd Sub\n</code></pre> <p>When the event callback is called, a param will be passed along. This is an array where the first item is the args set with AddPinEventListener and the second item is the args sent with the DispatchPinEvent call.</p>"},{"location":"events/#remove-pin-event-listener","title":"Remove Pin Event Listener","text":"<p>Used to remove a pin event listener</p> <pre><code>RemovePinEventListener \"sw01_active\", \"switch01Active\"\n</code></pre>"},{"location":"events/#dispatch-pin-event","title":"Dispatch Pin Event","text":"<p>Used to dispatch a pin event to the system</p> <pre><code>DispatchPinEvent \"sw01_active\", Null\n</code></pre>"},{"location":"events/#dispatch-relay-pin-event","title":"Dispatch Relay Pin Event","text":"<p>Used to dispatch a special pin event to the system where the argument passed with the pin event is relayed and returned to each function.</p> <pre><code>DispatchRelayPinEvent \"sw01_active\", 1\n</code></pre> <p>Listeners to these relay events must return the argument so that the next function can received the updated value</p> <pre><code>Function HandleSwitchHit(args)\n    Dim listenerArgs, dispatchArgs\n    listenerArgs = args(0)\n    dispatchArgs = args(1)\n    dispatchArgs = 2\n    HandleSwitchHit = dispatchArgs\nEnd Function\n</code></pre> <p>In the above example, the initial event dispatched passed 1 as the argument, the HandleSwitchHit received this, changed it to a 2 and returned that value. The next event callback to fire would then recieved the value 2 instead of the initial 1.</p>"},{"location":"extra-ball/","title":"Extra Ball Configuration","text":"<p>The extra ball configuration allows you to set up and customize extra ball awards in your pinball machine. Extra balls are special rewards that give players additional balls to play with, enhancing gameplay and scoring opportunities.</p>"},{"location":"extra-ball/#configuration-options","title":"Configuration Options","text":""},{"location":"extra-ball/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic extra ball configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ExtraBall(\"extra_ball_name\")\n        .AwardEvents = Array(\"event1\") ' Event that triggers the extra ball award\n        .MaxPerGame = 3               ' Maximum number of extra balls that can be awarded per game\n    End With\nEnd With\n</code></pre>"},{"location":"extra-ball/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced extra ball configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ExtraBall(\"extra_ball_name\")\n        ' Award settings\n        .AwardEvents = Array(\"event1\", \"event2\", \"event3\") ' Multiple events that can trigger the extra ball award\n\n        ' Limit settings\n        .MaxPerGame = 5               ' Maximum number of extra balls that can be awarded per game\n\n        ' Debug settings\n        .Debug = True                 ' Enable debug logging for this extra ball\n    End With\nEnd With\n</code></pre>"},{"location":"extra-ball/#property-descriptions","title":"Property Descriptions","text":""},{"location":"extra-ball/#award-settings","title":"Award Settings","text":"<ul> <li><code>AwardEvents</code>: Array of event names that trigger the extra ball award (Default: Empty Array)</li> </ul>"},{"location":"extra-ball/#limit-settings","title":"Limit Settings","text":"<ul> <li><code>MaxPerGame</code>: Maximum number of extra balls that can be awarded per game (Default: 0, meaning unlimited)</li> </ul>"},{"location":"extra-ball/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this extra ball (Default: False)</li> </ul>"},{"location":"extra-ball/#example-configurations","title":"Example Configurations","text":""},{"location":"extra-ball/#basic-extra-ball-example","title":"Basic Extra Ball Example","text":"<pre><code>' Basic extra ball configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ExtraBall(\"ramp_extra\")\n        .AwardEvents = Array(\"ramp_complete\")\n        .MaxPerGame = 2\n    End With\nEnd With\n</code></pre>"},{"location":"extra-ball/#advanced-extra-ball-example","title":"Advanced Extra Ball Example","text":"<pre><code>' Advanced extra ball configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ExtraBall(\"multiball_extra\")\n        ' Award settings\n        .AwardEvents = Array(\"left_ramp_complete\", \"right_ramp_complete\", \"center_ramp_complete\")\n\n        ' Limit settings\n        .MaxPerGame = 3\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"extra-ball/#extra-ball-tracking","title":"Extra Ball Tracking","text":"<p>The extra ball system tracks: - The total number of extra balls awarded to the player - The number of extra balls awarded for each specific extra ball configuration</p>"},{"location":"extra-ball/#events","title":"Events","text":"<p>The extra ball system generates several events that you can listen to:</p> <ul> <li><code>{extra_ball_name}_awarded</code>: Triggered when an extra ball is awarded</li> <li><code>extra_ball_awarded</code>: Generic event triggered when any extra ball is awarded</li> </ul> <p>Replace <code>{extra_ball_name}</code> with your actual extra ball name (prefixed with \"extra_ball_\" internally).</p>"},{"location":"extra-ball/#default-behavior","title":"Default Behavior","text":"<p>By default, extra balls are configured with: - No award events - No maximum per game limit (0) - Debug logging disabled</p>"},{"location":"extra-ball/#notes","title":"Notes","text":"<ul> <li>Extra balls are managed within the context of a mode</li> <li>The extra ball system automatically tracks the number of extra balls awarded</li> <li>Debug logging can be enabled to track extra ball operations</li> <li>Extra balls can be configured to work with specific game modes or features</li> <li>The extra ball system prevents exceeding the maximum per game limit</li> <li>Extra balls are awarded by incrementing the player's \"extra_balls\" state</li> <li>Extra balls can be awarded through multiple different events </li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#game-logic-devices","title":"Game Logic Devices","text":"<p>A well designed Virtual Pinball table contains many of the real world devices such as scoops, vuks (vertical up kickers), plungers, diverters, drop targets e.t.c. These devices are machine wide devices that need to respond to the ball interacting with them. The classes found in the framework mimic these device behaviours by monitoring and dispatching events which other parts of the system can respond to.</p> <ul> <li>Ball Device</li> <li>Diverters</li> <li>Drop Targets</li> </ul>"},{"location":"features/#game-logic-commands","title":"Game Logic Commands","text":"<p>To program your game, the framework provides a set of classes to manage the game life-cycle, player state, player score, modes, timers, light shows and manage your DMD or LCD game display.</p> <ul> <li>Ball Save</li> <li>Counter</li> <li>Event Player</li> <li>Light Player</li> <li>Mode</li> <li>Multball Locks</li> <li>Multiball</li> <li>Show Player</li> <li>Timer</li> </ul>"},{"location":"flipper/","title":"Flipper Configuration","text":"<p>The flipper configuration allows you to set up and customize flippers in your pinball machine. Flippers are the primary control mechanism for players to interact with the ball.</p>"},{"location":"flipper/#configuration-options","title":"Configuration Options","text":""},{"location":"flipper/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic flipper configuration\nWith CreateGlfFlipper(\"flipper_name\")\n    .Switch = \"s_flipper_switch\"       ' Name of the switch that controls the flipper\n    .Coil = \"c_flipper_coil\"           ' Name of the coil that powers the flipper\n    .ActionCallback = \"FlipperAction\"  ' Name of the callback function for flipper actions\nEnd With\n</code></pre>"},{"location":"flipper/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced flipper configuration\nWith CreateGlfFlipper(\"flipper_name\")\n    ' Basic settings\n    .Switch = \"s_flipper_switch\"\n    .Coil = \"c_flipper_coil\"\n    .ActionCallback = \"FlipperAction\"\n\n    ' Event settings\n    .EnableEvents = Array(\"ball_started\")                    ' Events that enable the flipper\n    .DisableEvents = Array(\"ball_will_end\", \"service_mode\")  ' Events that disable the flipper\n    .ResetEvents = Array(\"event1\", \"event2\")                 ' Events that reset the flipper\n\n    ' Debug settings\n    .Debug = True                                           ' Enable debug logging for this device\nEnd With\n</code></pre>"},{"location":"flipper/#property-descriptions","title":"Property Descriptions","text":""},{"location":"flipper/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>Switch</code>: String name of the switch that controls the flipper (Default: Empty)</li> <li><code>Coil</code>: String name of the coil that powers the flipper (Default: Empty)</li> <li><code>ActionCallback</code>: String name of the callback function that executes when the flipper is activated (Default: Empty)</li> </ul>"},{"location":"flipper/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the flipper (Default: Array(\"ball_started\"))</li> <li><code>DisableEvents</code>: Array of event names that will disable the flipper (Default: Array(\"ball_will_end\", \"service_mode_entered\"))</li> <li><code>ResetEvents</code>: Array of event names that will reset the flipper (Default: Array(\"machine_reset_phase_3\", \"ball_starting\"))</li> </ul>"},{"location":"flipper/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"flipper/#example-configurations","title":"Example Configurations","text":""},{"location":"flipper/#basic-flipper-example","title":"Basic Flipper Example","text":"<pre><code>' Basic flipper configuration\nWith CreateGlfFlipper(\"left\")\n    .Switch = \"s_left_flipper\"\n    .Coil = \"c_left_flipper\"\n    .ActionCallback = \"LeftFlipperAction\"\nEnd With\n</code></pre>"},{"location":"flipper/#advanced-flipper-example","title":"Advanced Flipper Example","text":"<pre><code>' Advanced flipper configuration\nWith CreateGlfFlipper(\"right\")\n    .Switch = \"s_right_flipper\"\n    .Coil = \"c_right_flipper\"\n    .ActionCallback = \"RightFlipperAction\"\n    .EnableEvents = Array(\"multiball_started\")\n    .DisableEvents = Array(\"multiball_ended\")\n    .ResetEvents = Array(\"flipper_reset\")\n    .Debug = True\nEnd With\n</code></pre>"},{"location":"flipper/#callback-examples","title":"Callback Examples","text":""},{"location":"flipper/#basic-flipper-callback","title":"Basic Flipper Callback","text":"<pre><code>' Basic flipper callback\nSub FlipperAction(Enabled)\n    ' Code to handle flipper action\n    If Enabled Then\n        ' Flipper is being activated\n        PlaySound \"flipper_up\"\n    Else\n        ' Flipper is being deactivated\n        PlaySound \"flipper_down\"\n    End If\nEnd Sub\n</code></pre>"},{"location":"flipper/#advanced-flipper-callback","title":"Advanced Flipper Callback","text":"<pre><code>' Advanced flipper callback with additional logic\nSub FlipperAction(Enabled)\n    If Enabled Then\n        ' Flipper is being activated\n        PlaySound \"flipper_up\"\n        LightOn \"l_flipper_active\"\n\n        ' Add score\n        AddScore 100\n    Else\n        ' Flipper is being deactivated\n        PlaySound \"flipper_down\"\n        LightOff \"l_flipper_active\"\n    End If\nEnd Sub\n</code></pre>"},{"location":"flipper/#events","title":"Events","text":"<p>The flipper system generates several events that you can listen to:</p> <ul> <li><code>{flipper_name}_activated</code>: Triggered when the flipper is activated</li> <li><code>{flipper_name}_deactivated</code>: Triggered when the flipper is deactivated</li> <li><code>{flipper_name}_enabled</code>: Triggered when the flipper is enabled</li> <li><code>{flipper_name}_disabled</code>: Triggered when the flipper is disabled</li> </ul> <p>Replace <code>{flipper_name}</code> with your actual flipper name (prefixed with \"flipper_\" internally).</p>"},{"location":"flipper/#default-behavior","title":"Default Behavior","text":"<p>By default, flippers are configured with: - Enabled on <code>ball_started</code> event - Disabled on <code>ball_will_end</code> and <code>service_mode_entered</code> events - Reset on <code>machine_reset_phase_3</code> and <code>ball_starting</code> events - Debug logging disabled</p>"},{"location":"flipper/#notes","title":"Notes","text":"<ul> <li>The flipper system automatically manages enable/disable states based on configured events</li> <li>Action callbacks receive a parameter indicating the state (1 for activate, 0 for deactivate)</li> <li>Debug logging can be enabled to track flipper state changes</li> <li>Flippers can be configured to activate during specific game modes</li> <li>The system prevents multiple activation/deactivation operations from overlapping </li> </ul>"},{"location":"high-score/","title":"High Score Configuration","text":"<p>The high score configuration allows you to set up and customize high score tracking in your pinball machine. High scores are used to track and display player achievements across multiple games.</p>"},{"location":"high-score/#configuration-options","title":"Configuration Options","text":""},{"location":"high-score/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic high score configuration\nDim high_score_mode : Set high_score_mode = CreateGlfMode(\"glf_high_scores\", 80)\nhigh_score_mode.StartEvents = Array(\"game_ending\")\nhigh_score_mode.StopEvents = Array(\"high_score_complete\")\nhigh_score_mode.UseWaitQueue = True\nDim high_score : Set high_score = (new GlfHighScore)(high_score_mode)\nhigh_score.Debug = True\nSet high_score_mode.HighScore = high_score\nSet glf_highscore = high_score\n</code></pre>"},{"location":"high-score/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced high score configuration\nDim high_score_mode : Set high_score_mode = CreateGlfMode(\"glf_high_scores\", 80)\nhigh_score_mode.StartEvents = Array(\"game_ending\")\nhigh_score_mode.StopEvents = Array(\"high_score_complete\")\nhigh_score_mode.UseWaitQueue = True\nDim high_score : Set high_score = (new GlfHighScore)(high_score_mode)\nhigh_score.Debug = True\n\n' Configure high score categories\nWith high_score.Categories\n    With .Category(\"score\")\n        .Add \"GRAND CHAMPION\", 1000000\n        .Add \"HIGH SCORE\", 500000\n        .Add \"SCORE\", 100000\n    End With\n    With .Category(\"time\")\n        .Add \"BEST TIME\", 120\n        .Add \"TIME\", 180\n    End With\nEnd With\n\n' Configure default values\nWith high_score.Defaults(\"score\")\n    .Add \"GRAND CHAMPION\", 1000000\n    .Add \"HIGH SCORE\", 500000\n    .Add \"SCORE\", 100000\nEnd With\n\n' Configure player variables\nWith high_score.Vars(\"score\")\n    .Add \"value\", \"score\"\nEnd With\n\n' Configure display settings\nhigh_score.AwardSlideDisplayTime = 4000\nhigh_score.EnterInitialsTimeout = 20000\n\n' Configure reset events\nhigh_score.ResetHighScoreEvents = Array(\"reset_high_scores\")\n\nSet high_score_mode.HighScore = high_score\nSet glf_highscore = high_score\n</code></pre>"},{"location":"high-score/#property-descriptions","title":"Property Descriptions","text":""},{"location":"high-score/#high-score-settings","title":"High Score Settings","text":"<ul> <li><code>Categories</code>: Dictionary of high score categories with their labels and positions</li> <li><code>Defaults</code>: Dictionary of default values for each category</li> <li><code>Vars</code>: Dictionary of player variables to track for each category</li> <li><code>AwardSlideDisplayTime</code>: Time in milliseconds to display award slides (Default: 4000)</li> <li><code>EnterInitialsTimeout</code>: Time in milliseconds to wait for initials input (Default: 20000)</li> <li><code>ResetHighScoreEvents</code>: Array of events that reset high scores (Default: Empty)</li> <li><code>Debug</code>: Boolean to enable debug logging for this high score system (Default: False)</li> </ul>"},{"location":"high-score/#example-configurations","title":"Example Configurations","text":""},{"location":"high-score/#basic-high-score-example","title":"Basic High Score Example","text":"<pre><code>' Basic high score configuration\nFunction EnableGlfHighScores()\n    Dim high_score_mode : Set high_score_mode = CreateGlfMode(\"glf_high_scores\", 80)\n    high_score_mode.StartEvents = Array(\"game_ending\")\n    high_score_mode.StopEvents = Array(\"high_score_complete\")\n    high_score_mode.UseWaitQueue = True\n    Dim high_score : Set high_score = (new GlfHighScore)(high_score_mode)\n    high_score.Debug = True\n    Set high_score_mode.HighScore = high_score\n    Set glf_highscore = high_score\n    Set EnableGlfHighScores = glf_highscore\nEnd Function\n</code></pre>"},{"location":"high-score/#advanced-high-score-example","title":"Advanced High Score Example","text":"<pre><code>' Advanced high score configuration\nFunction EnableGlfHighScores()\n    Dim high_score_mode : Set high_score_mode = CreateGlfMode(\"glf_high_scores\", 80)\n    high_score_mode.StartEvents = Array(\"game_ending\")\n    high_score_mode.StopEvents = Array(\"high_score_complete\")\n    high_score_mode.UseWaitQueue = True\n    Dim high_score : Set high_score = (new GlfHighScore)(high_score_mode)\n    high_score.Debug = True\n\n    ' Configure high score categories\n    With high_score.Categories\n        With .Category(\"score\")\n            .Add \"GRAND CHAMPION\", 1000000\n            .Add \"HIGH SCORE\", 500000\n            .Add \"SCORE\", 100000\n        End With\n        With .Category(\"time\")\n            .Add \"BEST TIME\", 120\n            .Add \"TIME\", 180\n        End With\n    End With\n\n    ' Configure default values\n    With high_score.Defaults(\"score\")\n        .Add \"GRAND CHAMPION\", 1000000\n        .Add \"HIGH SCORE\", 500000\n        .Add \"SCORE\", 100000\n    End With\n\n    ' Configure player variables\n    With high_score.Vars(\"score\")\n        .Add \"value\", \"score\"\n    End With\n\n    ' Configure display settings\n    high_score.AwardSlideDisplayTime = 4000\n    high_score.EnterInitialsTimeout = 20000\n\n    ' Configure reset events\n    high_score.ResetHighScoreEvents = Array(\"reset_high_scores\")\n\n    Set high_score_mode.HighScore = high_score\n    Set glf_highscore = high_score\n    Set EnableGlfHighScores = glf_highscore\nEnd Function\n</code></pre>"},{"location":"high-score/#high-score-system","title":"High Score System","text":"<p>The high score system manages player achievements with the following features:</p> <ul> <li>High scores are tracked across multiple games</li> <li>Scores are stored in an INI file for persistence</li> <li>Players can enter their initials for high scores</li> <li>Award slides are displayed for high scores</li> <li>High scores can be reset with specific events</li> </ul>"},{"location":"high-score/#events","title":"Events","text":"<p>The high score system generates and responds to the following events: - <code>game_ending</code>: Starts the high score mode - <code>high_score_complete</code>: Ends the high score mode - <code>high_score_enter_initials</code>: Triggers the initials input process - <code>text_input_high_score_complete</code>: Indicates initials input is complete - <code>high_score_award_display</code>: Triggers the award display - <code>award_display_complete</code>: Indicates the award display is complete - <code>category_award_display</code>: Category-specific award display event - <code>award_award_display</code>: Award-specific display event</p>"},{"location":"high-score/#default-behavior","title":"Default Behavior","text":"<p>By default, high scores are configured with: - No categories defined - Award slide display time of 4000ms - Initials input timeout of 20000ms - Debug logging disabled</p>"},{"location":"high-score/#notes","title":"Notes","text":"<ul> <li>High scores are managed within the context of a mode</li> <li>The high score system automatically handles score comparison and storage</li> <li>Debug logging can be enabled to track high score operations</li> <li>High scores can be configured to work with specific game modes or features</li> <li>The <code>Categories</code> property defines the structure of high scores</li> <li>The <code>Defaults</code> property sets default values for high scores</li> <li>The <code>Vars</code> property links player variables to high score categories</li> <li>High scores are stored in an INI file for persistence</li> <li>The system automatically handles score comparison and storage</li> <li>Players can enter their initials for high scores</li> <li>Award slides are displayed for high scores</li> <li>High scores can be reset with specific events </li> </ul>"},{"location":"installing/","title":"Installation","text":"<p>To install and use the Game Logic Framework in your VPX table, you will need to download the lastest vpx-glf.vbs script and include it in your table script</p> <p>vpx-glf.vbs</p>"},{"location":"installing/#global-script-required-settings","title":"Global Script Required Settings","text":"<p>The GLF requires a few global settings to function correctly. </p>"},{"location":"installing/#glf-game-timer","title":"GLF Game Timer","text":"<p>Add a timer object to your vpx table called Glf_GameTimer. Set it to Enabled with an Interval of -1ms.</p>"},{"location":"installing/#glf-table-collection","title":"GLF Table Collection","text":"<p>Create the following collections using the vpx collections manager (F8).</p> <pre><code>glf_lights\nglf_switches\nglf_slingshots\nglf_spinners\n</code></pre>"},{"location":"installing/#global-script-settings","title":"Global Script Settings","text":"<ul> <li><code>cGameName</code> must be set to your table name</li> <li><code>BallSize</code>, <code>BallMass</code>, <code>tnob</code>, <code>lob</code> and <code>gBot</code> must be set</li> <li><code>tablewidth</code> and <code>tableheight</code> must be set.</li> </ul> <p>Example </p> <pre><code>Const cGameName = \"MyAwesomeGame\"\nConst BallSize = 50         'Ball diameter in VPX units; must be 50\nConst BallMass = 1          'Ball mass must be 1\nConst tnob = 6              'Total playable balls (Balls in Trough)\nConst lob = 2               'Total non playable balls (Captive Balls)\nDim gBot                    'Collection used for ball tracking\nDim tablewidth: tablewidth = Table1.width\nDim tableheight: tableheight = Table1.height\n\n</code></pre>"},{"location":"installing/#configure-devices","title":"Configure Devices","text":"<p>You'll need an entry point to configure your devices and enable modes. Create a sub called <code>ConfigureGlfDevices</code></p> <pre><code>Sub ConfigureGlfDevices\n    'Device confguration goes here.\nEnd Sub\n</code></pre>"},{"location":"installing/#adding-hooks-into-glf","title":"Adding Hooks into GLF","text":"<p>You need to add these calls into to your table event subs.</p>"},{"location":"installing/#table-init","title":"Table Init","text":"<p>Inside <code>Table1_Init</code> add your <code>ConfigureGlfDevices</code> sub call and <code>Glf_Init()</code></p> <p>Example</p> <pre><code>Sub Table1_Init()\n    ConfigureGlfDevices()\n    Glf_Init()\nEnd Sub\n</code></pre>"},{"location":"installing/#table-exit","title":"Table Exit","text":"<p>Inside <code>Table1_Exit</code> add <code>Glf_Exit()</code></p> <p>Example</p> <pre><code>Sub Table1_Exit()\n    Glf_Exit()\nEnd Sub\n</code></pre>"},{"location":"installing/#table-keys","title":"Table Keys","text":"<p>Inside your <code>Table1_KeyDown</code> and <code>Sub Table1_KeyUp</code> Subs, add the <code>Glf_KeyDown</code> and <code>Glf_KeyUp</code> calls.</p> <p>Example</p> <pre><code>Sub Table1_KeyDown(ByVal keycode)\n    Glf_KeyDown(keycode)\nEnd Sub\n\nSub Table1_KeyUp(ByVal keycode)\n    Glf_KeyUp(keycode)\nEnd Sub\n</code></pre>"},{"location":"installing/#table-options","title":"Table Options","text":"<p>Inside <code>Table1_Options</code> add <code>Glf_Options(eventId)</code></p> <p>Example</p> <pre><code>Sub Table1_OptionEvent(ByVal eventId)\n    If eventId = 1 Then DisableStaticPreRendering = True\n\n    Glf_Options(eventId)\n\n    If eventId = 3 Then DisableStaticPreRendering = False\nEnd Sub\n\n</code></pre>"},{"location":"installing/#next-steps","title":"Next Steps","text":"<p>Setting up your trough</p>"},{"location":"light-controller/","title":"VPX Light Controller","text":"<p>A class to help vpx original table authors manage light states and custom sequences. Supports managing multiple light states per light, RGB lights, Syncing with VPX light sequences, custom key frame light sequences, import / export of light sequences to show creator and several utility functions for interacting with lights.</p>"},{"location":"light-controller/#installing","title":"Installing","text":"<ul> <li>Download the latest release from github releases and copy the vbs code from lightController.vbs into your vpx table script.</li> </ul>"},{"location":"light-controller/#registering-lights","title":"Registering Lights","text":""},{"location":"light-controller/#vpmmaplights-what-is-it","title":"vpmMapLights - what is it?","text":"<p>-vpmMapLights is a function which is available from the core.vbs script that comes with VPX. It allows you to setup your lights by specifying a light index in the lights timer interval property. This means you could have multiple light objects assigned to the same index to generate a greater light influence, or you might want to tie multiple lights together so they flash at the same time. This technique is used in vpx rom based tables to map the lights to the rom index. We use the same setup here for consistency.</p> <ul> <li>The first thing you need to do is assign a number to each light or    light groups and put that in the light objects timer interval</li> </ul> <p></p> <ul> <li>Next you need to add all of your lights into a vpx collection called aLights</li> </ul> <p></p> <ul> <li>At the top of your table script, make sure these variables are defined:</li> </ul> <pre><code>Const cGameName = \"REPLACE WITH TABLE NAME\"\nDim tablewidth: tablewidth = Table1.width\nDim tableheight: tableheight = Table1.height\n</code></pre> <ul> <li>In your table init sub, you can call the light controller's register lights function</li> </ul> <pre><code>lightCtrl.RegisterLights\n</code></pre> <p>This will do a few things. First, it will call vpmMapLights to setup your light indexes. Next it will build a grid containing all of your light positions, this is used if you want to export your lights and also for some custom color fading routines. Second, it will try to find any lightmaps that might be assoiciated with your lights. (these are primitives you can setup that need to track the opacity and color of your lights). Finally it will create a Sequence Runner for each light, this allows for each light to have multiple states, e.g. a mode shot and a multiball jackpot shot. More on Sequence Runners below.</p> <ul> <li>Finally you need to call <code>lightCtrl.Update()</code> inside a timer. You can reuse an existing timer or setup a new one. A 16ms timer works well</li> </ul>"},{"location":"light-controller/#light-controller-features","title":"Light Controller Features","text":"<ul> <li>Managing Lights<ul> <li>Light On/Off</li> <li>Light Blink</li> <li>Light Color</li> <li>Light Level</li> <li>Light Utilities<ul> <li>Light On With Color</li> <li>Light On With Flicker</li> <li>Light Pulse</li> <li>Light Pulse With Profile</li> </ul> </li> </ul> </li> <li>Managing Shots<ul> <li>Add Shot</li> <li>Remove Shot</li> <li>Remove All Shots</li> <li>Is Shot Lit</li> </ul> </li> <li>Syncing With VPX Lights</li> <li>Light Sequences<ul> <li>VPX Sequences</li> <li>Custom Sequences</li> <li>MPF Show Creator</li> <li>Exporting Lights</li> <li>Importing Light Shows</li> </ul> </li> </ul>"},{"location":"light-controller/#managing-lights","title":"Managing Lights","text":"<p>To control your lights you can call the following functions on the light controller object. All these require you to pass the vpx light as a parameter. E.g. The below examples assume you have a light in vpx called L01</p>"},{"location":"light-controller/#light-onoffblink","title":"Light On/Off/Blink","text":"<p>To turn a light on you use: LightOn and LightOff. To  set a light on a repeating Blink, you can use Blink</p> <pre><code>lightCtrl.LightOn L01\nlightCtrl.LightOff L01\nlightCtrl.Blink L01\n</code></pre> <p></p> <p></p>"},{"location":"light-controller/#light-color","title":"Light Color","text":"<p>VPX lights have color and fullColor properties. To change the light color use: LightColor</p> <pre><code>lightCtrl.LightColor L01, RGB(255,0,0) 'Sets the color property to Red\n\nlightCtrl.LightColor L01, Array(RGB(255,0,0), Null) 'Sets the color to Red\n\nlightCtrl.LightColor L01, Array(RGB(255,0,0), RGB(0,255,0)) 'Sets the color and fullColor propteries to Red &amp; Green\n\nlightCtrl.LightColor L01, Array(Null, RGB(0,0,255)) 'Sets the fullColor to Blue\n</code></pre> <p></p>"},{"location":"light-controller/#light-level","title":"Light Level","text":"<p>All of the lights registerd with the controller will be set to modulate brightness between 0-100. To change the level use: LightLevel</p> <pre><code>lightCtrl.LightLevel L01, 50 'Set the lights maximum brightness to 50%\n\nlightCtrl.LightLevel L01, 100 'Set the lights maximum brightness to 100%\n</code></pre> <p></p>"},{"location":"light-controller/#light-utilities","title":"Light Utilities","text":"<p>To help control common light events there are some utility functions available:</p>"},{"location":"light-controller/#light-on-with-color","title":"Light On With Color","text":"<p>Turns a light whilst also setting the color</p> <pre><code>lightCtrl.OnWithColor L01, RGB(255,0,0)\n</code></pre>"},{"location":"light-controller/#fade-light-to-color","title":"Fade Light To Color","text":"<p>Changes the color of a light to a new color, with a fading effect over a specified duration. </p> <p><code>lightCtrl.FadeLightToColor L01, RGB(255,0,0), 180</code></p>"},{"location":"light-controller/#light-on-with-flicker","title":"Light On With Flicker","text":"<p>Turns a light on with a short flickering sequence</p> <pre><code>lightCtrl.OnWithFlicker L01\n</code></pre> <p></p>"},{"location":"light-controller/#light-pulse","title":"Light Pulse","text":"<p>Pulses a light with the default pulse sequence. The state of the light does not change. E.g. after the pulse has finished, if the light was previously on, it will be on again.</p> <p>The second parameter is the number of times to repeat the pulse.</p> <pre><code>lightCtrl.Pulse L01, 0 'Pulse the light once, no repeat (total 1 pulse)\n\nlightCtrl.Pulse L01, 1 'Pulse the light, repeat the pulse once (total 2 pulses)\n</code></pre> <p></p>"},{"location":"light-controller/#light-pulse-with-profile","title":"Light Pulse With Profile","text":"<p>Pulses a light with a custom pulse sequence. The state of the light does not change. E.g. after the pulse has finished, if the light was previously on, it will be on again.</p> <p>The second parameter is the pulse sequence to use. Each element in the array is the brightness of the light for that frame. Each frame is 20ms so the 5 element seq below would last 100ms.</p> <pre><code>lightCtrl.PulseWithProfile L01, Array(10,50,100,50,0), 0\n</code></pre>"},{"location":"light-controller/#light-pulse-with-color","title":"Light Pulse With Color","text":"<p>Pulses a light with a color. The state of the light does not change. E.g. after the pulse has finished, if the light was previously on, it will be on again and the color will reset.</p> <pre><code>lightCtrl.PulseWithColor L01, RGB(255,0,0), 0\n</code></pre>"},{"location":"light-controller/#managing-shots","title":"Managing Shots","text":"<p>Aside from turning lights on and making them blink, you can add dfferent sequences to lights which run one after the other. You can manually manage this by creating sequence runners and adding / removing sequences. For convience the most common senarnio is to have one light lit for lots of differnt reasons. You may have a light lit for a mode shot but also for a jackpot or combo. The light controller lets you add multiple \"Shots\" to a light.</p>"},{"location":"light-controller/#add-shot","title":"Add Shot","text":"<p>To add a new shot to a light use: AddShot</p> <pre><code>lightCtrl.AddShot \"Name\", L01, RGB(255,0,0)\n</code></pre> <p>The first parameter is a name for the shot so we can reference it later. The second parameter is the vpx light object The third parameter is the color you want this shot to be.</p> <p></p>"},{"location":"light-controller/#remove-shot","title":"Remove Shot","text":"<p>To remove a shot from a light use: RemoveShot</p> <pre><code>lightCtrl.RemoveShot \"Name\"\n</code></pre> <p>Call remove shot with the name of the shot you want to remove</p>"},{"location":"light-controller/#remove-all-shots","title":"Remove All Shots","text":"<p>To remove all shots from a light use: RemoveAllShots</p> <pre><code>lightCtrl.RemoveAllShots L01\n</code></pre> <p>Call remove all shots with the vpx light object</p>"},{"location":"light-controller/#is-shot-lit","title":"Is Shot Lit","text":"<p>To check if a shot is current active on the light use: IsShotLit</p> <pre><code>lightCtrl.IsShotLit \"Name\", L01\n</code></pre> <p>The first parameter is the name of the shot The second parameter is the vpx light object</p>"},{"location":"light-controller/#light-sequences","title":"Light Sequences","text":""},{"location":"light-controller/#vpx-sequences","title":"VPX Sequences","text":"<p>The light controller can sync your lights to VPX light sequences</p> <p>In the example below you start the vpx sequence SeqCircleOutOn. Then call the light controller SyncWithVpxLights function with the collection the vpx light sequence uses. This will start syncing your lights.</p> <pre><code>SomeVPXLightSeq.Play SeqCircleOutOn,50,100\nlightCtrl.SyncWithVpxLights SomeVPXLightSeq\n\n'Stop syncing with vpx lights once the sequence is complete\nSub SomeVPXLightSeq_PlayDone()\n    lightCtrl.StopSyncWithVpxLights()\nEnd Sub\n</code></pre> <p>By default this will use the current color of the light. If you want to override the color of all the lights during the sequence you can use SetVpxSyncLightColor</p> <pre><code>SomeVPXLightSeq.Play SeqCircleOutOn,50,100\nlightCtrl.SyncWithVpxLights VpxCollection\nlightCtrl.SetVpxSyncLightColor RGB(255,0,0)\n</code></pre>"},{"location":"light-controller/#custom-sequences","title":"Custom Sequences","text":"<p>The controller supports writing your own custom sequences using a SequenceRunner and LightSequence items. Each Sequence Runner added to the controller is ran concurrently with other sequence runners. Each Light Sequence added to a runner is ran one after the other (following).</p> <p>Lets say you have a set of 3 lights and you want to light one after the other on repeat.</p> <p></p> <p>The sequence might this:</p> <ul> <li>First frame: </li> <li>Light 1 On</li> <li>Second frame:</li> <li>Light 1 Off</li> <li>Light 2 On</li> <li>Third Frame:</li> <li>Light 2 Off</li> <li>Light 3 Off</li> <li>Fourth Frame: </li> <li>Light 3 Off</li> </ul> <p>Using the controller you can create a sequence runner for this using CreateSeqRunner</p> <pre><code>lightCtrl.CreateSeqRunner \"_RunnerName_\" 'Runner name can be anything you want\n</code></pre> <p>Then you need to create the actual sequence using the LCSeq class.</p> <pre><code>Dim lSeqTest: Set lSeqTest = new LCSeq\nlSeqTest.Name = \"lSeqTest\"\n\nlSeqTest.Sequence = Array( _\n                    Array(\"L01|100\"), _\n                    Array(\"L01|0\", \"L02|100\"), _\n                    Array(\"L02|0\", \"L03|100\"), _\n                    Array(\"L03|0\"))\n\nlSeqTest.UpdateInterval = 180\nlSeqTest.Color = Null\nlSeqTest.Repeat = True\n\n</code></pre> <p>Finally, when you want to run the sequence, you need to add it to the runner you created using AddLightSeq.</p> <pre><code>lightCtrl.AddLightSeq \"_RunnerName_\", lSeqTest\n</code></pre> <p>As the above example is set to repeat, you can stop it by using RemoveLightSeq</p> <pre><code>lightCtrl.RemoveLightSeq \"_RunnerName_\", lSeqTest\n</code></pre>"},{"location":"light-controller/#color-palettes","title":"Color Palettes","text":"<p>When runnning light sequences it's nice to be able to change the color of the sequence. In addition to the color and sync color properties, the Light Controller supports palettes of color (gradients). </p> <p>To create a palette there are two options. You can create a palette between a start and end color, this will be a gradient from start to finish. Or you can create a palette with multiple color stops. </p> <p>To create a simple start and end palette you use:</p> <pre><code>Dim palette\npalette = lightCtrl.CreateColorPalette(\"FF0000\", \"0000FF\")\n</code></pre> <p></p> <p>The colors are defined with a hex value (above, red -&gt; blue).</p> <p>To create a palette with stops you can use:</p> <p><code>lightCtrl.CreateColorPaletteWithStops(\"FF0000\", \"0000FF\", Array(127), Array(\"00FF00\"))</code></p> <p></p> <p>Here we need to pass in the start and end colors with an array of stop posistions and an array of stop colors for those positions. Note the palette is 255 colors, so the above creates a green stop at position 127 (50%).</p>"},{"location":"light-controller/#how-palette-are-applied-to-sequences","title":"How palette are applied to sequences","text":"<p>You can use palettes with either any custom sequence or when syncing lights with vpx sequences.</p> <ul> <li> <p>Palette with VPX Seq</p> <ul> <li> <p><code>lightCtrl.SetVpxSyncLightsPalette paletteWithStops, \"LeftToRight\", 0</code></p> <ul> <li>param1: the palette</li> <li>param2: direction</li> <li>param3: speed<ul> <li>The direction param determines how the palette is applied to the lights. The options available are:</li> </ul> </li> <li>TopToBottom</li> <li>BottomToTop</li> <li>LeftToRight</li> <li>RightToLeft</li> <li>RadialOut</li> <li>RadialIn</li> <li>Clockwise</li> <li>AntiClockwise</li> </ul> </li> <li> <p>The speed param allows you to shift the colors in the palette over time. </p> <ul> <li>A value of 0 or Null wont shift the colors at all during the sequence</li> <li>Any other value e.g. 120 will shift the colors by 1 every 120ms.</li> </ul> </li> </ul> </li> <li> <p>Palette with Sequence Runner</p> <ul> <li><code>lSeqTest.Palette = Array(paletteWithStops, \"LeftToRight\", 0)</code><ul> <li>Same params as above however this time they are assigned as an array    to the palette property of the sequence runner</li> </ul> </li> </ul> </li> </ul>"},{"location":"light-controller/#show-creator","title":"Show Creator","text":"<p>For more complex light sequences the controller supports exporting your table lights so that they can be imported a tool called showcreator</p> <p>https://github.com/missionpinball/showcreator</p> <p></p> <p></p> <p>Show Creator is a tool for creating lightshows in MPF (Mission Pinball Framework). It takes a YAML file which describes your light locations and exports a YAML file with key frame data of the light show you created.</p> <p>We can use some functions on the light controller to help us integrate with MPF Show Creator</p>"},{"location":"light-controller/#exporting-lights","title":"Exporting Lights","text":"<p>You can export the position of your lights by using CompileLights. You need to pass in a vpx collection of the lights you want to export (this lets you have more fine grain control over which lights to animate in show creator).</p> <p>To export lights you need to have the variable cGameName set in your table. This is used to export the file to your computer in a subfolder called cGameName_LightShows</p> <pre><code>lightCtrl.CompileLights _VPXCollection_, \"filename\"\n</code></pre> <p>This will export a file you can use in MPF Show Creator.</p>"},{"location":"light-controller/#importing-light-shows","title":"Importing Light Shows","text":"<p>You can import the created lights into your table with the LoadLightShows command. This will read light show files saved from Show Creator and compile them to light sequences the controller can run. LoadLightShows will also output a file called lights-out.txt which contains the compiled vbs code for the light sequence. For development is easier to call LoadLightShows, however you should copy the compiled lightshows into your tablescript before sharing it.</p> <pre><code>lightCtrl.LoadLightShows\n</code></pre>"},{"location":"light-player/","title":"Light Player Configuration","text":"<p>The light player configuration allows you to set up and customize light patterns and sequences in your pinball machine. Light players are useful for creating dynamic lighting effects that respond to game events.</p>"},{"location":"light-player/#configuration-options","title":"Configuration Options","text":""},{"location":"light-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic light player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .LightPlayer\n        With .EventName(\"event1\")\n            With .Lights(\"light1\")\n                .Color = \"ff0000\"      ' Red color in RGB hex format\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"light-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced light player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .LightPlayer\n        ' Configure multiple events with multiple lights\n        With .EventName(\"event1\")\n            With .Lights(\"light1\")\n                .Color = \"ff0000\"      ' Red color in RGB hex format\n                .Fade = 500             ' Fade time in milliseconds\n                .Priority = 10          ' Priority level (higher numbers take precedence)\n            End With\n            With .Lights(\"light2\")\n                .Color = \"00ff00\"      ' Green color in RGB hex format\n                .Fade = 300             ' Fade time in milliseconds\n            End With\n        End With\n\n        With .EventName(\"event2\")\n            With .Lights(\"light3\")\n                .Color = \"0000ff\"      ' Blue color in RGB hex format\n                .Fade = 1000            ' Fade time in milliseconds\n                .Priority = 20          ' Priority level\n            End With\n        End With\n\n        ' Debug settings\n        .Debug = True                  ' Enable debug logging for this light player\n    End With\nEnd With\n</code></pre>"},{"location":"light-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"light-player/#light-settings","title":"Light Settings","text":"<ul> <li><code>Color</code>: Color of the light in RGB hex format (Default: \"ffffff\" - white)</li> <li><code>Fade</code>: Fade time in milliseconds (Default: Empty, meaning no fade)</li> <li><code>Priority</code>: Priority level for the light (Default: 0)</li> </ul>"},{"location":"light-player/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this light player (Default: False)</li> </ul>"},{"location":"light-player/#example-configurations","title":"Example Configurations","text":""},{"location":"light-player/#basic-light-player-example","title":"Basic Light Player Example","text":"<pre><code>' Basic light player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .LightPlayer\n        With .EventName(\"ramp_complete\")\n            With .Lights(\"ramp_light\")\n                .Color = \"ff0000\"      ' Red color\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"light-player/#advanced-light-player-example","title":"Advanced Light Player Example","text":"<pre><code>' Advanced light player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .LightPlayer\n        ' Configure multiple events with multiple lights\n        With .EventName(\"multiball_start\")\n            With .Lights(\"left_ramp\")\n                .Color = \"ff0000\"      ' Red color\n                .Fade = 500             ' Fade time in milliseconds\n                .Priority = 10          ' Priority level\n            End With\n            With .Lights(\"right_ramp\")\n                .Color = \"00ff00\"      ' Green color\n                .Fade = 500             ' Fade time in milliseconds\n                .Priority = 10          ' Priority level\n            End With\n            With .Lights(\"center_ramp\")\n                .Color = \"0000ff\"      ' Blue color\n                .Fade = 500             ' Fade time in milliseconds\n                .Priority = 10          ' Priority level\n            End With\n        End With\n\n        With .EventName(\"jackpot_ready\")\n            With .Lights(\"jackpot_light\")\n                .Color = \"ffff00\"      ' Yellow color\n                .Fade = 300             ' Fade time in milliseconds\n                .Priority = 20          ' Priority level\n            End With\n        End With\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"light-player/#light-stack-system","title":"Light Stack System","text":"<p>The light player system uses a stack-based approach to manage light states:</p> <ul> <li>Each light has a stack of color states</li> <li>When a new color is set, it's pushed onto the stack</li> <li>When a light is turned off, the top color is popped from the stack</li> <li>The light displays the color at the top of the stack</li> <li>Colors with higher priority take precedence</li> </ul>"},{"location":"light-player/#events","title":"Events","text":"<p>The light player system doesn't generate its own events, but it responds to events defined in your configuration. When an event occurs, the light player will automatically set the lights associated with that event.</p>"},{"location":"light-player/#default-behavior","title":"Default Behavior","text":"<p>By default, light players are configured with: - No events or lights - White color for lights - No fade time - Priority level of 0 - Debug logging disabled</p>"},{"location":"light-player/#notes","title":"Notes","text":"<ul> <li>Light players are managed within the context of a mode</li> <li>The light player system automatically handles light state transitions</li> <li>Debug logging can be enabled to track light player operations</li> <li>Light players can be configured to work with specific game modes or features</li> <li>The light stack system prevents multiple light changes from conflicting</li> <li>Light players support tag-based lighting for controlling multiple lights with a single configuration</li> <li>Fade effects can be customized for smooth light transitions</li> <li>Priority levels can be used to create complex light hierarchies </li> </ul>"},{"location":"light-shows/","title":"Light Shows Tutorial","text":""},{"location":"magnet/","title":"Magnet Configuration","text":"<p>The magnet configuration allows you to set up and customize magnets in your pinball machine. Magnets are used to grab, hold, and release balls with precise timing control.</p>"},{"location":"magnet/#configuration-options","title":"Configuration Options","text":""},{"location":"magnet/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic magnet configuration\nWith CreateGlfMagnet(\"magnet_name\")\n    .GrabSwitch = \"s_magnet_switch\"       ' Name of the switch that triggers ball grabbing\n    .ActionCallback = \"MagnetAction\"      ' Name of the callback function for magnet actions\n    .GrabTime = 1000                      ' Time in milliseconds to hold the ball\nEnd With\n</code></pre>"},{"location":"magnet/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced magnet configuration\nWith CreateGlfMagnet(\"magnet_name\")\n    ' Basic settings\n    .GrabSwitch = \"s_magnet_switch\"\n    .ActionCallback = \"MagnetAction\"\n    .GrabTime = 1000\n\n    ' Event settings\n    .EnableEvents = Array(\"ball_started\")                    ' Events that enable the magnet\n    .DisableEvents = Array(\"ball_will_end\", \"service_mode\")  ' Events that disable the magnet\n    .GrabBallEvents = Array(\"event1\", \"event2\")              ' Events that trigger ball grabbing\n    .ReleaseBallEvents = Array(\"event3\", \"event4\")           ' Events that trigger ball release\n    .ResetEvents = Array(\"event5\", \"event6\")                 ' Events that reset the magnet\n    .FlingBallEvents = Array(\"event7\", \"event8\")             ' Events that trigger ball flinging\n\n    ' Timing settings\n    .FlingDropTime = 250                                    ' Time to drop ball during fling\n    .FlingRegrabTime = 50                                   ' Time to regrab after fling\n    .ReleaseTime = 500                                      ' Time to release the ball\n\n    ' Debug settings\n    .Debug = True                                           ' Enable debug logging for this device\nEnd With\n</code></pre>"},{"location":"magnet/#property-descriptions","title":"Property Descriptions","text":""},{"location":"magnet/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>GrabSwitch</code>: String name of the switch that triggers ball grabbing (Default: Empty)</li> <li><code>ActionCallback</code>: String name of the callback function that executes when the magnet state changes (Default: Empty)</li> <li><code>GrabTime</code>: Integer specifying how long to hold the ball in milliseconds (Default: 1500)</li> </ul>"},{"location":"magnet/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of event names that will enable the magnet (Default: Array(\"ball_started\"))</li> <li><code>DisableEvents</code>: Array of event names that will disable the magnet (Default: Array(\"ball_will_end\", \"service_mode_entered\"))</li> <li><code>GrabBallEvents</code>: Array of event names that will trigger ball grabbing (Default: Empty Array)</li> <li><code>ReleaseBallEvents</code>: Array of event names that will trigger ball release (Default: Empty Array)</li> <li><code>ResetEvents</code>: Array of event names that will reset the magnet (Default: Array(\"machine_reset_phase_3\", \"ball_starting\"))</li> <li><code>FlingBallEvents</code>: Array of event names that will trigger ball flinging (Default: Empty Array)</li> </ul>"},{"location":"magnet/#timing-settings","title":"Timing Settings","text":"<ul> <li><code>FlingDropTime</code>: Integer specifying how long to drop the ball during fling (Default: 250)</li> <li><code>FlingRegrabTime</code>: Integer specifying how long to wait before regrabbing after fling (Default: 50)</li> <li><code>ReleaseTime</code>: Integer specifying how long to take to release the ball (Default: 500)</li> </ul>"},{"location":"magnet/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this device (Default: False)</li> </ul>"},{"location":"magnet/#example-configurations","title":"Example Configurations","text":""},{"location":"magnet/#basic-magnet-example","title":"Basic Magnet Example","text":"<pre><code>' Basic magnet configuration\nWith CreateGlfMagnet(\"mag1\")\n    .GrabSwitch = \"s_TargetMystery5\"\n    .ReleaseBallEvents = Array(\"magnet_mag1_grabbed_ball\")\n    .GrabTime = 1000\n    .ActionCallback = \"GrabMagnetAction\"\nEnd With\n</code></pre>"},{"location":"magnet/#advanced-magnet-example","title":"Advanced Magnet Example","text":"<pre><code>' Advanced magnet configuration\nWith CreateGlfMagnet(\"mag2\")\n    .GrabSwitch = \"s_magnet2\"\n    .ActionCallback = \"Magnet2Action\"\n    .GrabTime = 1500\n    .EnableEvents = Array(\"multiball_started\")\n    .DisableEvents = Array(\"multiball_ended\")\n    .GrabBallEvents = Array(\"magnet_ready\")\n    .ReleaseBallEvents = Array(\"magnet_release\")\n    .FlingBallEvents = Array(\"magnet_fling\")\n    .FlingDropTime = 300\n    .FlingRegrabTime = 100\n    .ReleaseTime = 800\n    .Debug = True\nEnd With\n</code></pre>"},{"location":"magnet/#vpx-magnet-object","title":"VPX Magnet Object","text":"<p>To create a VPX magnet object, use the following code:</p> <pre><code>' Create VPX magnet object\nDim MagnetName\nSet MagnetName = New cvpmMagnet\nWith MagnetName\n    .InitMagnet MagnetObject, 30           ' Initialize magnet with object and strength\n    .GrabCenter = False                    ' Whether to grab at center of magnet\n    .Strength = 15                         ' Magnet strength (higher = stronger pull)\n    .CreateEvents \"MagnetName\"             ' Create events with this name prefix\nEnd With\n</code></pre>"},{"location":"magnet/#vpx-magnet-properties","title":"VPX Magnet Properties","text":"<ul> <li><code>InitMagnet</code>: Initializes the magnet with a target object and strength</li> <li><code>GrabCenter</code>: Boolean indicating whether to grab at the center of the magnet (Default: False)</li> <li><code>Strength</code>: Integer specifying the magnet's strength (higher values = stronger pull)</li> <li><code>MagnetOn</code>: Boolean property to control magnet state (true = on, false = off)</li> </ul>"},{"location":"magnet/#callback-examples","title":"Callback Examples","text":""},{"location":"magnet/#basic-magnet-callback","title":"Basic Magnet Callback","text":"<pre><code>' Basic magnet callback\nSub MagnetAction(Enabled)\n    MagnetName.MagnetOn = Enabled\nEnd Sub\n</code></pre>"},{"location":"magnet/#advanced-magnet-callback","title":"Advanced Magnet Callback","text":"<pre><code>' Advanced magnet callback with additional logic\nSub MagnetAction(Enabled)\n    MagnetName.MagnetOn = Enabled\n\n    If Enabled Then\n        ' Magnet is being activated\n        PlaySound \"magnet_on\"\n        LightOn \"l_magnet_active\"\n    Else\n        ' Magnet is being deactivated\n        PlaySound \"magnet_off\"\n        LightOff \"l_magnet_active\"\n    End If\nEnd Sub\n</code></pre>"},{"location":"magnet/#events","title":"Events","text":"<p>The magnet system generates several events that you can listen to:</p> <ul> <li><code>{magnet_name}_grabbing_ball</code>: Triggered when the magnet starts grabbing a ball</li> <li><code>{magnet_name}_grabbed_ball</code>: Triggered when the magnet has grabbed a ball</li> <li><code>{magnet_name}_releasing_ball</code>: Triggered when the magnet starts releasing a ball</li> <li><code>{magnet_name}_released_ball</code>: Triggered when the magnet has released a ball</li> <li><code>{magnet_name}_flinging_ball</code>: Triggered when the magnet starts flinging a ball</li> <li><code>{magnet_name}_flinged_ball</code>: Triggered when the magnet has completed flinging a ball</li> </ul> <p>Replace <code>{magnet_name}</code> with your actual magnet name (prefixed with \"magnet_\" internally).</p>"},{"location":"magnet/#default-behavior","title":"Default Behavior","text":"<p>By default, magnets are configured with: - Enabled on <code>ball_started</code> event - Disabled on <code>ball_will_end</code> and <code>service_mode_entered</code> events - Reset on <code>machine_reset_phase_3</code> and <code>ball_starting</code> events - Fling drop time of 250 milliseconds - Fling regrab time of 50 milliseconds - Grab time of 1500 milliseconds - Release time of 500 milliseconds - Debug logging disabled</p>"},{"location":"magnet/#notes","title":"Notes","text":"<ul> <li>The magnet system automatically manages enable/disable states based on configured events</li> <li>Action callbacks receive a parameter indicating the state (1 for grab/activate, 0 for release/deactivate)</li> <li>Debug logging can be enabled to track magnet state changes</li> <li>Magnets can be configured to fling balls with precise timing control</li> <li>The system prevents multiple grab/release operations from overlapping</li> <li>VPX magnet objects provide additional control over magnet behavior and strength </li> </ul>"},{"location":"mode/","title":"Mode Configuration","text":"<p>The mode configuration allows you to set up and customize game modes in your pinball machine. Modes are used to organize and manage different game states, features, and behaviors.</p>"},{"location":"mode/#configuration-options","title":"Configuration Options","text":""},{"location":"mode/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic mode configuration\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"event1\", \"event2\")  ' Events that start the mode\n    .StopEvents = Array(\"event3\", \"event4\")   ' Events that stop the mode\nEnd With\n</code></pre>"},{"location":"mode/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced mode configuration\nWith CreateGlfMode(\"mode_name\", priority)\n    ' Event settings\n    .StartEvents = Array(\"event1\", \"event2\")                    ' Events that start the mode\n    .StopEvents = Array(\"event3\", \"event4\")                     ' Events that stop the mode\n\n    ' Mode settings\n    .UseWaitQueue = True                                        ' Whether to wait for mode to stop before continuing\n\n    ' Debug settings\n    .Debug = True                                              ' Enable debug logging for this mode\nEnd With\n</code></pre>"},{"location":"mode/#property-descriptions","title":"Property Descriptions","text":""},{"location":"mode/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>StartEvents</code>: Array of event names that will start the mode (Default: Empty Array)</li> <li><code>StopEvents</code>: Array of event names that will stop the mode (Default: Empty Array)</li> <li><code>Priority</code>: Integer value determining the order of mode execution (Default: 0)</li> </ul>"},{"location":"mode/#mode-behavior","title":"Mode Behavior","text":"<ul> <li><code>UseWaitQueue</code>: Boolean indicating whether to wait for the mode to stop before continuing (Default: False)</li> </ul>"},{"location":"mode/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this mode (Default: False)</li> </ul>"},{"location":"mode/#available-components","title":"Available Components","text":"<p>A mode can include various components that are managed within its scope:</p>"},{"location":"mode/#ball-management","title":"Ball Management","text":"<ul> <li><code>BallSaves</code>: Ball save mechanisms</li> <li><code>BallHolds</code>: Ball holding devices</li> </ul>"},{"location":"mode/#game-elements","title":"Game Elements","text":"<ul> <li><code>Counters</code>: Counting mechanisms</li> <li><code>Timers</code>: Timing mechanisms</li> <li><code>MultiballLocks</code>: Multiball lock mechanisms</li> <li><code>Multiballs</code>: Multiball configurations</li> <li><code>Shots</code>: Shot configurations</li> <li><code>ShotGroups</code>: Groups of shots</li> <li><code>SequenceShots</code>: Sequential shot patterns</li> <li><code>ExtraBalls</code>: Extra ball configurations</li> <li><code>ComboSwitches</code>: Combo switch configurations</li> <li><code>TimedSwitches</code>: Timed switch configurations</li> <li><code>Tilt</code>: Tilt mechanism</li> <li><code>HighScore</code>: High score tracking</li> </ul>"},{"location":"mode/#display-and-feedback","title":"Display and Feedback","text":"<ul> <li><code>LightPlayer</code>: Light control</li> <li><code>ShowPlayer</code>: Show control</li> <li><code>SegmentDisplayPlayer</code>: Segment display control</li> <li><code>EventPlayer</code>: Event control</li> <li><code>QueueEventPlayer</code>: Queued event control</li> <li><code>QueueRelayPlayer</code>: Queue relay control</li> <li><code>RandomEventPlayer</code>: Random event control</li> <li><code>SoundPlayer</code>: Sound control</li> <li><code>DOFPlayer</code>: Direct Output Framework control</li> <li><code>SlidePlayer</code>: Slide control</li> <li><code>VariablePlayer</code>: Variable control</li> </ul>"},{"location":"mode/#state-management","title":"State Management","text":"<ul> <li><code>StateMachines</code>: State machine configurations</li> <li><code>ShotProfiles</code>: Shot profile configurations</li> </ul>"},{"location":"mode/#example-configurations","title":"Example Configurations","text":""},{"location":"mode/#basic-mode-example","title":"Basic Mode Example","text":"<pre><code>' Basic mode configuration\nWith CreateGlfMode(\"multiball\", 10)\n    .StartEvents = Array(\"multiball_start\")\n    .StopEvents = Array(\"multiball_end\")\nEnd With\n</code></pre>"},{"location":"mode/#advanced-mode-example","title":"Advanced Mode Example","text":"<pre><code>' Advanced mode configuration\nWith CreateGlfMode(\"special_mode\", 20)\n    ' Event settings\n    .StartEvents = Array(\"special_mode_start\")\n    .StopEvents = Array(\"special_mode_end\", \"ball_end\")\n    .UseWaitQueue = True\n    .Debug = True\n\n    ' Event player for handling mode events\n    With .EventPlayer()\n        .Add \"mode_special_mode_started\", Array(\"stop_attract_mode\", \"enable_special_features\")\n        .Add \"mode_special_mode_stopped\", Array(\"disable_special_features\")\n    End With\n\n    ' Sound player for mode-specific sounds\n    With .SoundPlayer()\n        With .EventName(\"mode_special_mode_started\")\n            .Key = \"key_special_mode_music\"\n            .Sound = \"special_mode_music\"\n        End With\n        With .EventName(\"mode_special_mode_stopped\")\n            .Key = \"key_special_mode_music\"\n            .Sound = \"special_mode_music\"\n            .Action = \"stop\"\n        End With\n    End With\n\n    ' Light player for mode-specific lighting\n    With .LightPlayer()\n        With .EventName(\"mode_special_mode_started\")\n            With .Lights(\"GI\")\n                .Color = \"ff0000\"  ' Red lighting\n                .Fade = 200\n            End With\n        End With\n        With .EventName(\"mode_special_mode_stopped\")\n            With .Lights(\"GI\")\n                .Color = \"ffffff\"  ' Normal lighting\n                .Fade = 200\n            End With\n        End With\n    End With\n\n    ' Add a counter for tracking progress\n    With .Counters(\"special_counter\")\n        .CountEvents = Array(\"special_target_hit\")\n        .CountCompleteValue = 5\n        .EventsWhenComplete = Array(\"special_mode_complete\")\n    End With\n\n    ' Add a timer for time-limited features\n    With .Timers(\"special_timer\")\n        .TickInterval = 1000\n        .StartValue = 30\n        .EndValue = 0\n        .StartRunning = True\n        With .ControlEvents()\n            .EventName = \"mode_special_mode_started\"\n            .Action = \"restart\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"mode/#events","title":"Events","text":"<p>The mode system generates several events that you can listen to:</p> <ul> <li><code>{mode_name}_starting</code>: Triggered when the mode is about to start</li> <li><code>{mode_name}_started</code>: Triggered when the mode has started</li> <li><code>{mode_name}_stopping</code>: Triggered when the mode is about to stop</li> <li><code>{mode_name}_stopped</code>: Triggered when the mode has stopped</li> </ul> <p>Replace <code>{mode_name}</code> with your actual mode name (prefixed with \"mode_\" internally).</p>"},{"location":"mode/#default-behavior","title":"Default Behavior","text":"<p>By default, modes are configured with: - No start or stop events - Priority of 0 - Wait queue disabled - Debug logging disabled - All components initialized but empty</p>"},{"location":"mode/#notes","title":"Notes","text":"<ul> <li>Modes can be nested and have different priorities</li> <li>Components within a mode are automatically managed based on mode state</li> <li>Debug logging can be enabled to track mode operations</li> <li>The system prevents multiple mode operations from overlapping</li> <li>Modes can be used to organize complex game features and behaviors </li> </ul>"},{"location":"multiball-locks/","title":"Multiball Locks Configuration","text":"<p>The multiball locks configuration allows you to set up and customize ball locking mechanisms for multiball modes in your pinball machine. Multiball locks are devices that capture and hold balls until they are released for multiball play.</p>"},{"location":"multiball-locks/#configuration-options","title":"Configuration Options","text":""},{"location":"multiball-locks/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic multiball lock configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .MultiballLock(\"lock_name\")\n        .LockDevice = \"ball_device\"   ' Ball device that acts as the lock\n        .BallsToLock = 3              ' Number of balls that can be locked\n    End With\nEnd With\n</code></pre>"},{"location":"multiball-locks/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced multiball lock configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .MultiballLock(\"lock_name\")\n        ' Lock settings\n        .LockDevice = \"ball_device\"   ' Ball device that acts as the lock\n        .BallsToLock = 3              ' Number of balls that can be locked\n        .BallsToReplace = 1           ' Number of balls to replace when locked (Default: -1, meaning all)\n\n        ' Event settings\n        .LockEvents = Array(\"event1\", \"event2\") ' Events that trigger ball locking\n        .ResetEvents = Array(\"event3\", \"event4\") ' Events that reset the lock count\n\n        ' Debug settings\n        .Debug = True                 ' Enable debug logging for this lock\n    End With\nEnd With\n</code></pre>"},{"location":"multiball-locks/#property-descriptions","title":"Property Descriptions","text":""},{"location":"multiball-locks/#lock-settings","title":"Lock Settings","text":"<ul> <li><code>LockDevice</code>: Ball device that acts as the lock (Default: Empty)</li> <li><code>BallsToLock</code>: Number of balls that can be locked (Default: 0)</li> <li><code>BallsToReplace</code>: Number of balls to replace when locked (Default: -1, meaning all)</li> </ul>"},{"location":"multiball-locks/#event-control","title":"Event Control","text":"<ul> <li><code>LockEvents</code>: Array of event names that trigger ball locking (Default: Empty Array)</li> <li><code>ResetEvents</code>: Array of event names that reset the lock count (Default: Empty Array)</li> <li><code>EnableEvents</code>: Array of event names that enable the lock (Default: Empty Array)</li> <li><code>DisableEvents</code>: Array of event names that disable the lock (Default: Empty Array)</li> </ul>"},{"location":"multiball-locks/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this lock (Default: False)</li> </ul>"},{"location":"multiball-locks/#example-configurations","title":"Example Configurations","text":""},{"location":"multiball-locks/#basic-multiball-lock-example","title":"Basic Multiball Lock Example","text":"<pre><code>' Basic multiball lock configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .MultiballLock(\"basic_lock\")\n        .LockDevice = \"lock_device\"\n        .BallsToLock = 3\n    End With\nEnd With\n</code></pre>"},{"location":"multiball-locks/#advanced-multiball-lock-example","title":"Advanced Multiball Lock Example","text":"<pre><code>' Advanced multiball lock configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .MultiballLock(\"jackpot_lock\")\n        ' Lock settings\n        .LockDevice = \"lock_device\"\n        .BallsToLock = 3\n        .BallsToReplace = 1\n\n        ' Event settings\n        .LockEvents = Array(\"lock_ready\")\n        .ResetEvents = Array(\"multiball_reset\")\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"multiball-locks/#lock-tracking","title":"Lock Tracking","text":"<p>The multiball lock system tracks: - The number of balls currently locked - Whether the lock is enabled or disabled</p>"},{"location":"multiball-locks/#events","title":"Events","text":"<p>The multiball lock system generates several events that you can listen to:</p> <ul> <li><code>{lock_name}_locked_ball</code>: Triggered when a ball is locked, with the count of locked balls</li> <li><code>{lock_name}_full</code>: Triggered when the lock is full, with the count of locked balls</li> </ul> <p>Replace <code>{lock_name}</code> with your actual lock name (prefixed with \"multiball_lock_\" internally).</p>"},{"location":"multiball-locks/#default-behavior","title":"Default Behavior","text":"<p>By default, multiball locks are configured with: - No lock device - 0 balls to lock - -1 balls to replace (meaning all) - No lock or reset events - Debug logging disabled</p>"},{"location":"multiball-locks/#notes","title":"Notes","text":"<ul> <li>Multiball locks are managed within the context of a mode</li> <li>The multiball lock system automatically tracks the number of balls locked</li> <li>Debug logging can be enabled to track lock operations</li> <li>Multiball locks can be configured to work with specific game modes or features</li> <li>The multiball lock system prevents exceeding the maximum number of balls that can be locked</li> <li>Multiball locks can be configured to replace a specific number of balls when locked</li> <li>The lock count is tracked per player using player state </li> </ul>"},{"location":"multiball/","title":"Multiball Configuration","text":"<p>The multiball configuration allows you to set up and customize multiball modes in your pinball machine. Multiball modes are special gameplay features where multiple balls are in play simultaneously, creating exciting and challenging gameplay.</p>"},{"location":"multiball/#configuration-options","title":"Configuration Options","text":""},{"location":"multiball/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic multiball configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Multiball(\"multiball_name\")\n        .BallCount = 3                ' Number of balls in multiball\n        .StartEvents = Array(\"event1\") ' Events that trigger multiball start\n        .StopEvents = Array(\"event2\")  ' Events that trigger multiball stop\n    End With\nEnd With\n</code></pre>"},{"location":"multiball/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced multiball configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Multiball(\"multiball_name\")\n        ' Ball settings\n        .BallCount = 3                ' Number of balls in multiball\n        .BallCountType = \"total\"      ' \"total\" or \"additional\" (Default: \"total\")\n        .BallLock = \"lock_device\"     ' Ball device to eject balls from\n\n        ' Event settings\n        .StartEvents = Array(\"event1\", \"event2\") ' Events that trigger multiball start\n        .StopEvents = Array(\"event3\", \"event4\")  ' Events that trigger multiball stop\n        .ResetEvents = Array(\"event5\", \"event6\") ' Events that reset multiball\n        .AddABallEvents = Array(\"event7\", \"event8\") ' Events that add a ball to multiball\n\n        ' Timing settings\n        .ShootAgain = 10000           ' Time in milliseconds for shoot again (Default: 10000)\n        .GracePeriod = 2000           ' Grace period in milliseconds after shoot again ends (Default: 0)\n        .HurryUp = 5000               ' Time in milliseconds before hurry up warning (Default: 0)\n        .AddABallShootAgain = 5000    ' Time in milliseconds for add a ball shoot again (Default: 5000)\n        .AddABallGracePeriod = 1000   ' Grace period in milliseconds for add a ball (Default: 0)\n        .AddABallHurryUpTime = 2000   ' Time in milliseconds before add a ball hurry up warning (Default: 0)\n\n        ' Debug settings\n        .Debug = True                 ' Enable debug logging for this multiball\n    End With\nEnd With\n</code></pre>"},{"location":"multiball/#property-descriptions","title":"Property Descriptions","text":""},{"location":"multiball/#ball-settings","title":"Ball Settings","text":"<ul> <li><code>BallCount</code>: Number of balls in multiball (Default: 0)</li> <li><code>BallCountType</code>: Type of ball count - \"total\" or \"additional\" (Default: \"total\")</li> <li><code>BallLock</code>: Ball device to eject balls from (Default: Empty)</li> </ul>"},{"location":"multiball/#event-control","title":"Event Control","text":"<ul> <li><code>StartEvents</code>: Array of event names that trigger multiball start (Default: Empty Array)</li> <li><code>StopEvents</code>: Array of event names that trigger multiball stop (Default: Empty Array)</li> <li><code>ResetEvents</code>: Array of event names that reset multiball (Default: Empty Array)</li> <li><code>AddABallEvents</code>: Array of event names that add a ball to multiball (Default: Empty Array)</li> <li><code>EnableEvents</code>: Array of event names that enable multiball (Default: Empty Array)</li> <li><code>DisableEvents</code>: Array of event names that disable multiball (Default: Empty Array)</li> </ul>"},{"location":"multiball/#timing-settings","title":"Timing Settings","text":"<ul> <li><code>ShootAgain</code>: Time in milliseconds for shoot again (Default: 10000)</li> <li><code>GracePeriod</code>: Grace period in milliseconds after shoot again ends (Default: 0)</li> <li><code>HurryUp</code>: Time in milliseconds before hurry up warning (Default: 0)</li> <li><code>AddABallShootAgain</code>: Time in milliseconds for add a ball shoot again (Default: 5000)</li> <li><code>AddABallGracePeriod</code>: Grace period in milliseconds for add a ball (Default: 0)</li> <li><code>AddABallHurryUpTime</code>: Time in milliseconds before add a ball hurry up warning (Default: 0)</li> </ul>"},{"location":"multiball/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this multiball (Default: False)</li> </ul>"},{"location":"multiball/#example-configurations","title":"Example Configurations","text":""},{"location":"multiball/#basic-multiball-example","title":"Basic Multiball Example","text":"<pre><code>' Basic multiball configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Multiball(\"basic_multiball\")\n        .BallCount = 3\n        .StartEvents = Array(\"multiball_start\")\n        .StopEvents = Array(\"multiball_stop\")\n    End With\nEnd With\n</code></pre>"},{"location":"multiball/#advanced-multiball-example","title":"Advanced Multiball Example","text":"<pre><code>' Advanced multiball configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Multiball(\"jackpot_multiball\")\n        ' Ball settings\n        .BallCount = 3\n        .BallCountType = \"total\"\n        .BallLock = \"lock_device\"\n\n        ' Event settings\n        .StartEvents = Array(\"jackpot_ready\")\n        .StopEvents = Array(\"jackpot_collected\", \"ball_ended\")\n        .ResetEvents = Array(\"multiball_reset\")\n        .AddABallEvents = Array(\"extra_ball_awarded\")\n\n        ' Timing settings\n        .ShootAgain = 15000\n        .GracePeriod = 3000\n        .HurryUp = 5000\n        .AddABallShootAgain = 8000\n        .AddABallGracePeriod = 2000\n        .AddABallHurryUpTime = 3000\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"multiball/#multiball-states","title":"Multiball States","text":"<p>The multiball system manages several states:</p> <ul> <li><code>enabled</code>: Multiball is enabled and ready to start</li> <li><code>shoot_again_enabled</code>: Shoot again is active</li> <li><code>grace_period_enabled</code>: Grace period is active</li> <li><code>hurry_up_enabled</code>: Hurry up warning is active</li> </ul>"},{"location":"multiball/#events","title":"Events","text":"<p>The multiball system generates several events that you can listen to:</p> <ul> <li><code>{multiball_name}_started</code>: Triggered when multiball starts</li> <li><code>{multiball_name}_ended</code>: Triggered when multiball ends</li> <li><code>{multiball_name}_reset_event</code>: Triggered when multiball is reset</li> <li><code>{multiball_name}_shoot_again</code>: Triggered when a ball is saved during shoot again</li> <li><code>{multiball_name}_shoot_again_ended</code>: Triggered when shoot again ends</li> <li><code>{multiball_name}_grace_period</code>: Triggered when grace period starts</li> <li><code>{multiball_name}_hurry_up</code>: Triggered when hurry up warning starts</li> <li><code>{multiball_name}_ball_lost</code>: Triggered when a ball is lost during multiball</li> </ul> <p>Replace <code>{multiball_name}</code> with your actual multiball name (prefixed with \"multiball_\" internally).</p>"},{"location":"multiball/#default-behavior","title":"Default Behavior","text":"<p>By default, multiballs are configured with: - 0 balls - \"total\" ball count type - No ball lock device - No start, stop, reset, or add a ball events - 10000ms shoot again time - 0ms grace period - 0ms hurry up time - 5000ms add a ball shoot again time - 0ms add a ball grace period - 0ms add a ball hurry up time - Debug logging disabled</p>"},{"location":"multiball/#notes","title":"Notes","text":"<ul> <li>Multiballs are managed within the context of a mode</li> <li>The multiball system automatically handles ball tracking and shoot again</li> <li>Debug logging can be enabled to track multiball operations</li> <li>Multiballs can be configured to work with specific game modes or features</li> <li>The multiball system supports adding balls during gameplay</li> <li>Shoot again, grace period, and hurry up features can be customized</li> <li>Multiballs can be configured to eject balls from a ball lock device </li> </ul>"},{"location":"player-state/","title":"Player State","text":"<p>The player state stores variables per player. </p>"},{"location":"player-state/#set-player-state","title":"Set Player State","text":"<p><code>SetPlayerState</code> is used to put data into the player state. You need a key and value.</p> <pre><code>SetPlayerState \"current_ball\", 1\n</code></pre>"},{"location":"player-state/#get-player-state","title":"Get Player State","text":"<p><code>GetPlayerState</code> is used to get data out of the player state.</p> <pre><code>GetPlayerState \"current_ball\"\n</code></pre>"},{"location":"player-state/#player-events","title":"Player Events","text":"<p>When a player state value changes it will post an event so you can respond to that change. e.g. light changes, dmd updates.</p>"},{"location":"player-state/#add-player-state-event-listener","title":"Add Player State Event Listener","text":"<p>To start monitoring a player event.</p> <p>The parameters are: </p> <ul> <li>Player State Key: e.g. \"score\", this is the value you want to monitor</li> <li>Key: A unqiue key for this listnener. You can have multiple subs monitoring the same value doing different things. This key is used to separate those.</li> <li>Callback: The Sub or Function to call when the value changes</li> <li>Priority: callbacks will be called in priority order, the higher priorities will be called first.</li> <li>Args: Any arguments you want to pass along to the callback.</li> </ul> <pre><code>AddPlayerStateEventListener \"score\", \"player_score_changed\", 0, \"UpdateDMD\", 1000, Null\n</code></pre>"},{"location":"player-state/#remove-player-state-event-listener","title":"Remove Player State Event Listener","text":"<p>To stop monitoring a player event.</p> <pre><code>RemovePlayerStateEventListener \"score\", \"player_score_change\"\n</code></pre>"},{"location":"queue-event-player/","title":"Queue Event Player Configuration","text":"<p>The queue event player configuration allows you to set up and customize queued event playback in your pinball machine. Queue event players are useful for creating sequences of events that play in order, with configurable timing between events.</p>"},{"location":"queue-event-player/#configuration-options","title":"Configuration Options","text":""},{"location":"queue-event-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic queue event player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .QueueEventPlayer\n        With .EventName(\"event1\")\n            .Events = Array(\"response1\", \"response2\")\n            .Delay = 500    ' Delay in milliseconds between events\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"queue-event-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced queue event player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .QueueEventPlayer\n        ' Configure multiple event queues\n        With .EventName(\"event1\")\n            .Events = Array(\"response1\", \"response2\", \"response3\")\n            .Delay = 500    ' Delay in milliseconds between events\n            .Randomize = True    ' Randomize the order of events\n            .Repeat = 2     ' Repeat the sequence 2 times\n        End With\n\n        With .EventName(\"event2\")\n            .Events = Array(\"response4\", \"response5\")\n            .Delay = 1000   ' Longer delay between events\n            .Randomize = False   ' Play events in order\n            .Repeat = 1     ' Play sequence once\n        End With\n\n        ' Debug settings\n        .Debug = True      ' Enable debug logging for this queue event player\n    End With\nEnd With\n</code></pre>"},{"location":"queue-event-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"queue-event-player/#queue-settings","title":"Queue Settings","text":"<ul> <li><code>Events</code>: Array of event names to play in sequence</li> <li><code>Delay</code>: Delay in milliseconds between events (Default: 0)</li> <li><code>Randomize</code>: Boolean to randomize the order of events (Default: False)</li> <li><code>Repeat</code>: Number of times to repeat the sequence (Default: 1)</li> </ul>"},{"location":"queue-event-player/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this queue event player (Default: False)</li> </ul>"},{"location":"queue-event-player/#example-configurations","title":"Example Configurations","text":""},{"location":"queue-event-player/#basic-queue-event-player-example","title":"Basic Queue Event Player Example","text":"<pre><code>' Basic queue event player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .QueueEventPlayer\n        With .EventName(\"ramp_complete\")\n            .Events = Array(\"ramp_light_on\", \"ramp_light_off\")\n            .Delay = 500    ' Half second between events\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"queue-event-player/#advanced-queue-event-player-example","title":"Advanced Queue Event Player Example","text":"<pre><code>' Advanced queue event player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .QueueEventPlayer\n        ' Configure multiple event queues\n        With .EventName(\"multiball_start\")\n            .Events = Array(\"left_ramp_on\", \"right_ramp_on\", \"center_ramp_on\")\n            .Delay = 500    ' Half second between events\n            .Randomize = True    ' Randomize the order of events\n            .Repeat = 2     ' Repeat the sequence 2 times\n        End With\n\n        With .EventName(\"jackpot_ready\")\n            .Events = Array(\"jackpot_light_on\", \"jackpot_light_off\")\n            .Delay = 1000   ' One second between events\n            .Randomize = False   ' Play events in order\n            .Repeat = 1     ' Play sequence once\n        End With\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"queue-event-player/#queue-system","title":"Queue System","text":"<p>The queue event player system manages event sequences with the following features:</p> <ul> <li>Events are played in sequence with configurable delays</li> <li>Sequences can be randomized for variety</li> <li>Sequences can be repeated multiple times</li> <li>Each queue is independent and can be configured differently</li> <li>Queues are cleared when the mode stops</li> </ul>"},{"location":"queue-event-player/#events","title":"Events","text":"<p>The queue event player system doesn't generate its own events, but it plays the events defined in your configuration. When a trigger event occurs, the queue event player will automatically play the associated sequence of events.</p>"},{"location":"queue-event-player/#default-behavior","title":"Default Behavior","text":"<p>By default, queue event players are configured with: - No events or queues - No delay between events - Events played in order (not randomized) - Sequences played once - Debug logging disabled</p>"},{"location":"queue-event-player/#notes","title":"Notes","text":"<ul> <li>Queue event players are managed within the context of a mode</li> <li>The queue system automatically handles event timing and sequencing</li> <li>Debug logging can be enabled to track queue event player operations</li> <li>Queue event players can be configured to work with specific game modes or features</li> <li>The queue system prevents events from overlapping or conflicting</li> <li>Randomization can be used to create variety in event sequences</li> <li>Repeat counts can be used to create longer sequences</li> <li>Delays can be customized to create rhythm and timing in event sequences </li> </ul>"},{"location":"random-event-player/","title":"Random Event Player Configuration","text":"<p>The random event player configuration allows you to set up and customize random event generation in your pinball machine. Random event players are used to generate random events based on configured probabilities and conditions.</p>"},{"location":"random-event-player/#configuration-options","title":"Configuration Options","text":""},{"location":"random-event-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic random event player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n\n    With .RandomEventPlayer()\n        With .EventName(\"s_left_sling_active\")\n            .Add \"flash_left_sling_red\", 1\n            .Add \"flash_right_sling_blue\", 1\n        End With\n        With .EventName(\"s_right_sling_active\")\n            .Add \"flash_right_sling_red\", 1\n            .Add \"flash_right_sling_blue\", 1\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"sequence-shot/","title":"Sequence Shot Configuration","text":"<p>The sequence shot configuration allows you to set up and customize sequential shot patterns in your pinball machine. Sequence shots track a series of events or switch hits that must occur in a specific order to complete a sequence.</p>"},{"location":"sequence-shot/#configuration-options","title":"Configuration Options","text":""},{"location":"sequence-shot/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic sequence shot configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SequenceShot(\"sequence_name\")\n        .EventSequence = Array(\"event1\", \"event2\", \"event3\")\n        .SequenceTimeout = 5000    ' Timeout in milliseconds\n    End With\nEnd With\n</code></pre>"},{"location":"sequence-shot/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced sequence shot configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SequenceShot(\"sequence_name\")\n        ' Configure event sequence\n        .EventSequence = Array(\"event1\", \"event2\", \"event3\")\n\n        ' Configure switch sequence (alternative to event sequence)\n        .SwitchSequence = Array(\"switch1\", \"switch2\", \"switch3\")\n\n        ' Configure sequence timeout\n        .SequenceTimeout = 5000    ' Timeout in milliseconds\n\n        ' Configure cancel events\n        .CancelEvents = Array(\"cancel_event1\", \"cancel_event2\")\n\n        ' Configure cancel switches\n        .CancelSwitches = Array(\"cancel_switch1\", \"cancel_switch2\")\n\n        ' Configure delay events\n        .DelayEventList = Array(\"delay_event1\", \"delay_event2\")\n\n        ' Configure delay switches\n        .DelaySwitchList = Array(\"delay_switch1\", \"delay_switch2\")\n\n        ' Debug settings\n        .Debug = True      ' Enable debug logging for this sequence shot\n    End With\nEnd With\n</code></pre>"},{"location":"sequence-shot/#property-descriptions","title":"Property Descriptions","text":""},{"location":"sequence-shot/#sequence-settings","title":"Sequence Settings","text":"<ul> <li><code>EventSequence</code>: Array of event names that must occur in sequence</li> <li><code>SwitchSequence</code>: Array of switch names that must be hit in sequence</li> <li><code>SequenceTimeout</code>: Time in milliseconds before the sequence times out (Default: 0)</li> </ul>"},{"location":"sequence-shot/#cancel-settings","title":"Cancel Settings","text":"<ul> <li><code>CancelEvents</code>: Array of events that will cancel the sequence</li> <li><code>CancelSwitches</code>: Array of switches that will cancel the sequence</li> </ul>"},{"location":"sequence-shot/#delay-settings","title":"Delay Settings","text":"<ul> <li><code>DelayEventList</code>: Array of events that will delay the sequence</li> <li><code>DelaySwitchList</code>: Array of switches that will delay the sequence</li> </ul>"},{"location":"sequence-shot/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this sequence shot (Default: False)</li> </ul>"},{"location":"sequence-shot/#example-configurations","title":"Example Configurations","text":""},{"location":"sequence-shot/#basic-sequence-shot-example","title":"Basic Sequence Shot Example","text":"<pre><code>' Basic sequence shot configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SequenceShot(\"ramp_sequence\")\n        .EventSequence = Array(\"left_ramp\", \"right_ramp\", \"center_ramp\")\n        .SequenceTimeout = 10000    ' 10 seconds to complete the sequence\n    End With\nEnd With\n</code></pre>"},{"location":"sequence-shot/#advanced-sequence-shot-example","title":"Advanced Sequence Shot Example","text":"<pre><code>' Advanced sequence shot configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SequenceShot(\"jackpot_sequence\")\n        ' Configure event sequence\n        .EventSequence = Array(\"left_ramp\", \"right_ramp\", \"center_ramp\")\n\n        ' Configure cancel events\n        .CancelEvents = Array(\"ball_lost\", \"multiball_end\")\n\n        ' Configure delay events\n        .DelayEventList = Array(\"special_mode_start\")\n\n        ' Configure sequence timeout\n        .SequenceTimeout = 15000    ' 15 seconds to complete the sequence\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"sequence-shot/#sequence-system","title":"Sequence System","text":"<p>The sequence shot system manages sequential patterns with the following features:</p> <ul> <li>Events or switches must occur in a specific order</li> <li>Sequences can be canceled by specific events or switches</li> <li>Sequences can be delayed by specific events or switches</li> <li>Sequences can have a timeout period</li> <li>Multiple sequences can be tracked simultaneously</li> <li>Sequences are cleared when the mode stops</li> </ul>"},{"location":"sequence-shot/#events","title":"Events","text":"<p>The sequence shot system generates the following events:</p> <ul> <li><code>sequence_name_hit</code>: Fired when a sequence is completed</li> <li><code>sequence_name_timeout</code>: Fired when a sequence times out</li> </ul>"},{"location":"sequence-shot/#default-behavior","title":"Default Behavior","text":"<p>By default, sequence shots are configured with: - No events or switches in the sequence - No timeout period - No cancel events or switches - No delay events or switches - Debug logging disabled</p>"},{"location":"sequence-shot/#notes","title":"Notes","text":"<ul> <li>Sequence shots are managed within the context of a mode</li> <li>The sequence system automatically handles event tracking and timing</li> <li>Debug logging can be enabled to track sequence shot operations</li> <li>Sequence shots can be configured to work with specific game modes or features</li> <li>The sequence system prevents events from overlapping or conflicting</li> <li>Timeouts can be used to create urgency in sequence completion</li> <li>Cancel events can be used to reset sequences when certain conditions are met</li> <li>Delay events can be used to pause sequences during special modes or events </li> </ul>"},{"location":"shot-group/","title":"Shot Group Configuration","text":"<p>The shot group configuration allows you to group multiple shots together and manage them as a single unit in your pinball machine. Shot groups are useful for creating patterns of shots that can be rotated, enabled, disabled, or reset together.</p>"},{"location":"shot-group/#configuration-options","title":"Configuration Options","text":""},{"location":"shot-group/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic shot group configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ShotGroup(\"group_name\")\n        .Shots = Array(\"shot1\", \"shot2\", \"shot3\")\n    End With\nEnd With\n</code></pre>"},{"location":"shot-group/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced shot group configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ShotGroup(\"group_name\")\n        ' Configure shots in the group\n        .Shots = Array(\"shot1\", \"shot2\", \"shot3\")\n\n        ' Configure enable events\n        .EnableEvents = Array(\"enable_event1\", \"enable_event2\")\n\n        ' Configure disable events\n        .DisableEvents = Array(\"disable_event1\", \"disable_event2\")\n\n        ' Configure rotation events\n        .RotateEvents = Array(\"rotate_event1\", \"rotate_event2\")\n\n        ' Configure left rotation events\n        .RotateLeftEvents = Array(\"rotate_left_event1\", \"rotate_left_event2\")\n\n        ' Configure right rotation events\n        .RotateRightEvents = Array(\"rotate_right_event1\", \"rotate_right_event2\")\n\n        ' Configure enable rotation events\n        .EnableRotationEvents = Array(\"enable_rotation_event1\", \"enable_rotation_event2\")\n\n        ' Configure disable rotation events\n        .DisableRotationEvents = Array(\"disable_rotation_event1\", \"disable_rotation_event2\")\n\n        ' Configure restart events\n        .RestartEvents = Array(\"restart_event1\", \"restart_event2\")\n\n        ' Configure reset events\n        .ResetEvents = Array(\"reset_event1\", \"reset_event2\")\n\n        ' Debug settings\n        .Debug = True      ' Enable debug logging for this shot group\n    End With\nEnd With\n</code></pre>"},{"location":"shot-group/#property-descriptions","title":"Property Descriptions","text":""},{"location":"shot-group/#shot-settings","title":"Shot Settings","text":"<ul> <li><code>Shots</code>: Array of shot names that belong to the group</li> </ul>"},{"location":"shot-group/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of events that will enable the shot group</li> <li><code>DisableEvents</code>: Array of events that will disable the shot group</li> <li><code>RotateEvents</code>: Array of events that will rotate the shot group</li> <li><code>RotateLeftEvents</code>: Array of events that will rotate the shot group left</li> <li><code>RotateRightEvents</code>: Array of events that will rotate the shot group right</li> <li><code>EnableRotationEvents</code>: Array of events that will enable rotation for the shot group</li> <li><code>DisableRotationEvents</code>: Array of events that will disable rotation for the shot group</li> <li><code>RestartEvents</code>: Array of events that will restart the shot group</li> <li><code>ResetEvents</code>: Array of events that will reset the shot group</li> </ul>"},{"location":"shot-group/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this shot group (Default: False)</li> </ul>"},{"location":"shot-group/#example-configurations","title":"Example Configurations","text":""},{"location":"shot-group/#basic-shot-group-example","title":"Basic Shot Group Example","text":"<pre><code>' Basic shot group configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ShotGroup(\"ramp_group\")\n        .Shots = Array(\"left_ramp\", \"right_ramp\", \"center_ramp\")\n    End With\nEnd With\n</code></pre>"},{"location":"shot-group/#advanced-shot-group-example","title":"Advanced Shot Group Example","text":"<pre><code>' Advanced shot group configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ShotGroup(\"jackpot_group\")\n        ' Configure shots in the group\n        .Shots = Array(\"left_ramp\", \"right_ramp\", \"center_ramp\")\n\n        ' Configure enable events\n        .EnableEvents = Array(\"multiball_start\")\n\n        ' Configure disable events\n        .DisableEvents = Array(\"multiball_end\", \"ball_lost\")\n\n        ' Configure rotation events\n        .RotateEvents = Array(\"rotate_jackpot\")\n\n        ' Configure left rotation events\n        .RotateLeftEvents = Array(\"rotate_jackpot_left\")\n\n        ' Configure right rotation events\n        .RotateRightEvents = Array(\"rotate_jackpot_right\")\n\n        ' Configure enable rotation events\n        .EnableRotationEvents = Array(\"enable_jackpot_rotation\")\n\n        ' Configure disable rotation events\n        .DisableRotationEvents = Array(\"disable_jackpot_rotation\")\n\n        ' Configure restart events\n        .RestartEvents = Array(\"restart_jackpot\")\n\n        ' Configure reset events\n        .ResetEvents = Array(\"reset_jackpot\")\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"shot-group/#shot-group-system","title":"Shot Group System","text":"<p>The shot group system manages groups of shots with the following features:</p> <ul> <li>Shots can be enabled, disabled, reset, or restarted as a group</li> <li>Shot states can be rotated within the group</li> <li>Rotation can be enabled or disabled</li> <li>Shot groups can track when all shots in the group reach a common state</li> <li>Shot groups are managed within the context of a mode</li> </ul>"},{"location":"shot-group/#events","title":"Events","text":"<p>The shot group system generates the following events:</p> <ul> <li><code>group_name_hit</code>: Fired when any shot in the group is hit</li> <li><code>group_name_complete</code>: Fired when all shots in the group reach a common state</li> <li><code>group_name_state_complete</code>: Fired when all shots in the group reach a specific state</li> </ul>"},{"location":"shot-group/#default-behavior","title":"Default Behavior","text":"<p>By default, shot groups are configured with: - No shots in the group - No enable or disable events - No rotation events - No restart or reset events - Rotation enabled - Debug logging disabled</p>"},{"location":"shot-group/#notes","title":"Notes","text":"<ul> <li>Shot groups are managed within the context of a mode</li> <li>The shot group system automatically handles shot state tracking</li> <li>Debug logging can be enabled to track shot group operations</li> <li>Shot groups can be configured to work with specific game modes or features</li> <li>The shot group system prevents shots from conflicting with each other</li> <li>Rotation can be used to create variety in shot patterns</li> <li>Shot groups can be used to create complex shot patterns that must be completed in a specific order</li> <li>The common state feature can be used to track when all shots in a group reach a specific state </li> </ul>"},{"location":"shot-profile/","title":"Shot Profile Configuration","text":"<p>The shot profile configuration allows you to define the behavior and states of shots in your pinball machine. Shot profiles define how shots advance, whether they loop, and how they handle rotation.</p>"},{"location":"shot-profile/#configuration-options","title":"Configuration Options","text":""},{"location":"shot-profile/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic shot profile configuration\nWith CreateGlfShotProfile(\"profile_name\")\n    ' Configure basic settings\n    ' Configure states\n    With .States(\"state1\")\n        .Show = \"show_name\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n    End With\n\n    With .States(\"state2\")\n        .Show = \"show_name2\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n    End With\nEnd With\n</code></pre>"},{"location":"shot-profile/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced shot profile configuration\nWith CreateGlfShotProfile(\"profile_name\")\n    ' Configure basic settings\n    .AdvanceOnHit = True\n    .Block = False\n    .ProfileLoop = True\n    .RotationPattern = Array(\"r\", \"l\", \"r\")\n\n    ' Configure states to rotate\n    .StateNamesToRotate = Array(\"state1\", \"state2\")\n\n    ' Configure states not to rotate\n    .StateNamesNotToRotate = Array(\"state3\", \"state4\")\n\n    ' Configure states\n    With .States(\"state1\")\n        .Show = \"show_name\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n        .Key = \"key_state1\"\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"token1\", \"value1\"\n            .Add \"token2\", \"value2\"\n        End With\n    End With\n\n    With .States(\"state2\")\n        .Show = \"show_name2\"\n        .Loops = 2\n        .Speed = 1.5\n        .SyncMs = 100\n        .Key = \"key_state2\"\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"token1\", \"value3\"\n            .Add \"token2\", \"value4\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"shot-profile/#property-descriptions","title":"Property Descriptions","text":""},{"location":"shot-profile/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>AdvanceOnHit</code>: Boolean to determine if the shot advances on hit (Default: True)</li> <li><code>Block</code>: Boolean to determine if the shot blocks events (Default: False)</li> <li><code>ProfileLoop</code>: Boolean to determine if the shot loops back to the first state (Default: False)</li> <li><code>RotationPattern</code>: Array of rotation directions (\"r\" for right, \"l\" for left) (Default: Array(\"r\"))</li> </ul>"},{"location":"shot-profile/#state-settings","title":"State Settings","text":"<ul> <li><code>States</code>: Dictionary of states for the shot profile</li> <li><code>Show</code>: Name of the show to play for this state</li> <li><code>Loops</code>: Number of times to loop the show (Default: 1)</li> <li><code>Speed</code>: Speed multiplier for the show (Default: 1)</li> <li><code>SyncMs</code>: Synchronization time in milliseconds (Default: 0)</li> <li><code>Key</code>: Unique key for the state, used for show identification</li> <li><code>Tokens</code>: Dictionary of tokens to pass to the show</li> </ul>"},{"location":"shot-profile/#rotation-settings","title":"Rotation Settings","text":"<ul> <li><code>StateNamesToRotate</code>: Array of state names that should be included in rotation</li> <li><code>StateNamesNotToRotate</code>: Array of state names that should not be included in rotation</li> </ul>"},{"location":"shot-profile/#example-configurations","title":"Example Configurations","text":""},{"location":"shot-profile/#basic-shot-profile-example","title":"Basic Shot Profile Example","text":"<pre><code>' Basic shot profile configuration\nWith CreateGlfShotProfile(\"ramp_profile\")\n    ' Configure basic settings\n    .AdvanceOnHit = True\n    .Block = False\n    .ProfileLoop = False\n    .RotationPattern = Array(\"r\")\n\n    ' Configure states\n    With .States(\"lit\")\n        .Show = \"ramp_lit\"\n        .Loops = 1\n        .Speed = 1.0\n        .SyncMs = 0\n        .Key = \"key_ramp_lit\"\n    End With\n\n    With .States(\"unlit\")\n        .Show = \"ramp_unlit\"\n        .Loops = 1\n        .Speed = 1.0\n        .SyncMs = 0\n        .Key = \"key_ramp_unlit\"\n    End With\nEnd With\n</code></pre>"},{"location":"shot-profile/#advanced-shot-profile-example","title":"Advanced Shot Profile Example","text":"<pre><code>' Advanced shot profile configuration\nWith CreateGlfShotProfile(\"jackpot_profile\")\n    ' Configure basic settings\n    .AdvanceOnHit = True\n    .Block = False\n    .ProfileLoop = True\n    .RotationPattern = Array(\"r\", \"l\", \"r\")\n\n    ' Configure states to rotate\n    .StateNamesToRotate = Array(\"lit\", \"super_lit\")\n\n    ' Configure states not to rotate\n    .StateNamesNotToRotate = Array(\"unlit\", \"completed\")\n\n    ' Configure states\n    With .States(\"unlit\")\n        .Show = \"jackpot_unlit\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n        .Key = \"key_jackpot_unlit\"\n    End With\n\n    With .States(\"lit\")\n        .Show = \"jackpot_lit\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n        .Key = \"key_jackpot_lit\"\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"color\", \"red\"\n        End With\n    End With\n\n    With .States(\"super_lit\")\n        .Show = \"jackpot_super_lit\"\n        .Loops = 2\n        .Speed = 1\n        .SyncMs = 100\n        .Key = \"key_jackpot_super_lit\"\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"color\", \"blue\"\n            .Add \"intensity\", \"high\"\n        End With\n    End With\n\n    With .States(\"completed\")\n        .Show = \"jackpot_completed\"\n        .Loops = 1\n        .Speed = 1\n        .SyncMs = 0\n        .Key = \"key_jackpot_completed\"\n    End With\nEnd With\n</code></pre>"},{"location":"shot-profile/#double-scoring-profile-example","title":"Double Scoring Profile Example","text":"<pre><code>' Double scoring profile configuration\nWith CreateGlfShotProfile(\"double_scoring\")\n    ' Configure basic settings\n    .AdvanceOnHit = True\n    .Block = False\n    .ProfileLoop = False\n\n    ' Configure states\n    With .States(\"unlit\")\n        .Show = \"off\"\n        .Key = \"key_off_ds\"\n        With .Tokens\n            .Add \"lights\", \"LDS\"\n            .Add \"color\", DoubleScoringColor\n        End With\n    End With\n\n    With .States(\"flashing\")\n        .Show = \"flash_color_with_fade\"\n        .Key = \"key_flashing_ds\"\n        .Speed = 2\n        With .Tokens\n            .Add \"lights\", \"LDS\"\n            .Add \"fade\", 500\n            .Add \"color\", DoubleScoringColor\n        End With\n    End With\n\n    With .States(\"hurry\")\n        .Show = \"flash_color\"\n        .Key = \"key_hurry_ds\"\n        .Speed = 7\n        With .Tokens\n            .Add \"lights\", \"LDS\"\n            .Add \"color\", DoubleScoringColor\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"shot-profile/#shot-profile-system","title":"Shot Profile System","text":"<p>The shot profile system manages shot behavior with the following features:</p> <ul> <li>Shots can advance on hit or remain in the same state</li> <li>Shots can loop back to the first state or stop at the last state</li> <li>Shots can block events or allow them to pass through</li> <li>Shots can have multiple states with different shows and behaviors</li> <li>Shots can be rotated according to a pattern</li> <li>Some states can be excluded from rotation</li> <li>Each state can have a unique key for identification</li> <li>States can pass tokens to shows for customization</li> </ul>"},{"location":"shot-profile/#events","title":"Events","text":"<p>The shot profile system doesn't generate its own events, but it defines the behavior of shots that use the profile.</p>"},{"location":"shot-profile/#default-behavior","title":"Default Behavior","text":"<p>By default, shot profiles are configured with: - Advance on hit enabled - Block disabled - Loop disabled - Right rotation pattern - No states defined - No states to rotate or not to rotate - No keys defined for states - No tokens defined for states</p>"},{"location":"shot-profile/#notes","title":"Notes","text":"<ul> <li>Shot profiles are used by shots to define their behavior</li> <li>The shot profile system automatically handles state transitions</li> <li>Shot profiles can be configured to work with specific game modes or features</li> <li>The shot profile system prevents states from conflicting with each other</li> <li>Rotation patterns can be used to create variety in shot behavior</li> <li>Show tokens can be used to customize shows for different states</li> <li>State synchronization can be used to coordinate multiple shots</li> <li>The loop feature can be used to create continuous shot patterns</li> <li>Tokens can be used to pass dynamic values to shows, such as colors or light groups </li> </ul>"},{"location":"shot/","title":"Shot Configuration","text":"<p>For a step-by-step guide on how to configure shots, see the Shots Tutorial.</p> <p>The shot configuration allows you to set up and customize individual shots in your pinball machine. Shots are the primary interactive elements that players can hit to score points and trigger game events.</p>"},{"location":"shot/#configuration-options","title":"Configuration Options","text":""},{"location":"shot/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic shot configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Shots(\"shot_name\")\n        .Switch = \"switch_name\"\n        .Profile = \"profile_name\"\n    End With\nEnd With\n</code></pre>"},{"location":"shot/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced shot configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Shots(\"shot_name\")\n        ' Configure switches\n        .Switches = Array(\"switch1\", \"switch2\", \"switch3\")\n\n        ' Configure profile\n        .Profile = \"profile_name\"\n\n        ' Configure enable events\n        .EnableEvents = Array(\"enable_event1\", \"enable_event2\")\n\n        ' Configure disable events\n        .DisableEvents = Array(\"disable_event1\", \"disable_event2\")\n\n        ' Configure advance events\n        .AdvanceEvents = Array(\"advance_event1\", \"advance_event2\")\n\n        ' Configure hit events\n        .HitEvents = Array(\"hit_event1\", \"hit_event2\")\n\n        ' Configure reset events\n        .ResetEvents = Array(\"reset_event1\", \"reset_event2\")\n\n        ' Configure restart events\n        .RestartEvents = Array(\"restart_event1\", \"restart_event2\")\n\n        ' Configure control events\n        With .ControlEvents\n            .Events = Array(\"control_event1\", \"control_event2\")\n            .State = 1\n            .Force = True\n            .ForceShow = False\n        End With\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"token1\", \"value1\"\n            .Add \"token2\", \"value2\"\n        End With\n\n        ' Configure start enabled\n        .StartEnabled = True\n\n        ' Configure persist\n        .Persist = True\n\n        ' Debug settings\n        .Debug = True      ' Enable debug logging for this shot\n    End With\nEnd With\n</code></pre>"},{"location":"shot/#property-descriptions","title":"Property Descriptions","text":""},{"location":"shot/#basic-settings","title":"Basic Settings","text":"<ul> <li><code>Switch</code>: Single switch name that triggers the shot</li> <li><code>Switches</code>: Array of switch names that trigger the shot</li> <li><code>Profile</code>: Name of the shot profile to use (Default: \"default\")</li> <li><code>StartEnabled</code>: Boolean to determine if the shot starts enabled (Default: Empty)</li> <li><code>Persist</code>: Boolean to determine if the shot state persists between balls (Default: True)</li> </ul>"},{"location":"shot/#event-control","title":"Event Control","text":"<ul> <li><code>EnableEvents</code>: Array of events that will enable the shot</li> <li><code>DisableEvents</code>: Array of events that will disable the shot</li> <li><code>AdvanceEvents</code>: Array of events that will advance the shot</li> <li><code>HitEvents</code>: Array of events that will trigger the shot</li> <li><code>ResetEvents</code>: Array of events that will reset the shot</li> <li><code>RestartEvents</code>: Array of events that will restart the shot</li> <li><code>ControlEvents</code>: Object that defines events that will control the shot</li> <li><code>Events</code>: Array of events that will control the shot</li> <li><code>State</code>: State to jump to when control events are triggered</li> <li><code>Force</code>: Boolean to determine if the shot should be forced to the state</li> <li><code>ForceShow</code>: Boolean to determine if the show should be forced to play</li> </ul>"},{"location":"shot/#show-settings","title":"Show Settings","text":"<ul> <li><code>Tokens</code>: Dictionary of tokens to pass to the show</li> </ul>"},{"location":"shot/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this shot (Default: False)</li> </ul>"},{"location":"shot/#example-configurations","title":"Example Configurations","text":""},{"location":"shot/#basic-shot-example","title":"Basic Shot Example","text":"<pre><code>' Basic shot configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Shots(\"left_ramp\")\n        .Switch = \"sw_left_ramp\"\n        .Profile = \"ramp_profile\"\n    End With\nEnd With\n</code></pre>"},{"location":"shot/#advanced-shot-example","title":"Advanced Shot Example","text":"<pre><code>' Advanced shot configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Shots(\"jackpot\")\n        ' Configure switches\n        .Switches = Array(\"sw_left_ramp\", \"sw_right_ramp\", \"sw_center_ramp\")\n\n        ' Configure profile\n        .Profile = \"jackpot_profile\"\n\n        ' Configure enable events\n        .EnableEvents = Array(\"multiball_start\")\n\n        ' Configure disable events\n        .DisableEvents = Array(\"multiball_end\", \"ball_lost\")\n\n        ' Configure advance events\n        .AdvanceEvents = Array(\"advance_jackpot\")\n\n        ' Configure hit events\n        .HitEvents = Array(\"hit_jackpot\")\n\n        ' Configure reset events\n        .ResetEvents = Array(\"reset_jackpot\")\n\n        ' Configure restart events\n        .RestartEvents = Array(\"restart_jackpot\")\n\n        ' Configure control events\n        With .ControlEvents\n            .Events = Array(\"control_jackpot\")\n            .State = 2\n            .Force = True\n            .ForceShow = False\n        End With\n\n        ' Configure show tokens\n        With .Tokens\n            .Add \"color\", \"red\"\n            .Add \"intensity\", \"high\"\n        End With\n\n        ' Configure start enabled\n        .StartEnabled = True\n\n        ' Configure persist\n        .Persist = True\n\n        ' Debug settings\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"shot/#shot-system","title":"Shot System","text":"<p>The shot system manages individual shots with the following features:</p> <ul> <li>Shots can be enabled, disabled, reset, or restarted</li> <li>Shots can advance to the next state or jump to a specific state</li> <li>Shots can be controlled by events</li> <li>Shots can have multiple switches</li> <li>Shots can have custom show tokens</li> <li>Shots can persist their state between balls</li> <li>Shots are managed within the context of a mode</li> </ul>"},{"location":"shot/#events","title":"Events","text":"<p>The shot system generates the following events:</p> <ul> <li><code>shot_name_hit</code>: Fired when the shot is hit</li> <li><code>shot_name_profile_hit</code>: Fired when the shot is hit with the profile name</li> <li><code>shot_name_profile_state_hit</code>: Fired when the shot is hit with the profile name and state</li> <li><code>shot_name_state_hit</code>: Fired when the shot is hit with the state name</li> </ul>"},{"location":"shot/#default-behavior","title":"Default Behavior","text":"<p>By default, shots are configured with: - No switches - Default profile - No enable or disable events - No advance events - No hit events - No reset or restart events - No control events - No show tokens - Start enabled determined by enable events - Persist enabled - Debug logging disabled</p>"},{"location":"shot/#notes","title":"Notes","text":"<ul> <li>Shots are managed within the context of a mode</li> <li>The shot system automatically handles state transitions</li> <li>Debug logging can be enabled to track shot operations</li> <li>Shots can be configured to work with specific game modes or features</li> <li>The shot system prevents events from conflicting with each other</li> <li>Control events can be used to create complex shot behavior</li> <li>Show tokens can be used to customize shows for different shots</li> <li>The persist feature can be used to maintain shot state between balls</li> <li>Multiple switches can be used to create complex shot triggers </li> </ul>"},{"location":"show-player/","title":"Show Player Configuration","text":"<p>The show player configuration allows you to set up and customize show playback in your game. Show players are used to control lighting effects, and other visual elements.</p>"},{"location":"show-player/#configuration-options","title":"Configuration Options","text":""},{"location":"show-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic show player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .ShowPlayer()\n        With .EventName(\"s_left_sling_active\")\n            .Key = \"key_s_left_sling_active\"\n            .Show = \"flicker_color\"\n            .Speed = 1\n            With .Tokens()\n                .Add \"lights\", \"f140\"\n                .Add \"color\", \"C81616\"\n            End With\n        End With\n        With .EventName(\"s_right_sling_active\")\n            .Key = \"key_s_right_sling_active\"\n            .Show = \"flicker_color\"\n            .Speed = 1\n            With .Tokens()\n                .Add \"lights\", \"f141\"\n                .Add \"color\", \"1616FF\"\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"show-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"show-player/#show-settings","title":"Show Settings","text":"<ul> <li><code>Show</code>: Name of the show to play</li> <li><code>Loops</code>: Number of times to loop the show (Default: 1)</li> <li><code>Speed</code>: Speed multiplier for the show (Default: 1.0)</li> <li><code>SyncMs</code>: Synchronization time in milliseconds (Default: 0)</li> </ul>"},{"location":"show-player/#show-tokens","title":"Show Tokens","text":"<ul> <li><code>Tokens</code>: Dictionary of tokens to pass to the show</li> </ul>"},{"location":"show-player/#priority-settings","title":"Priority Settings","text":"<ul> <li><code>Priority</code>: Priority level for the show (Default: 0)</li> </ul>"},{"location":"show-player/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this show player (Default: False)</li> </ul>"},{"location":"slide-player/","title":"Slide Player Configuration","text":"<p>The slide player configuration allows you to set up and customize slide animations in your pinball machine. Slide players are used to play slide animations in response to events.</p>"},{"location":"slide-player/#configuration-options","title":"Configuration Options","text":""},{"location":"slide-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic slide player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SlidePlayer\n        With .EventName(\"event_name\")\n            .Slide = \"slide_name\"\n            .Action = \"play\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"slide-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"slide-player/#slide-settings","title":"Slide Settings","text":"<ul> <li><code>Slide</code>: The name of the slide to play</li> <li><code>Action</code>: Action to perform on the slide (\"play\") (Default: \"play\")</li> <li><code>Expire</code>: Time in milliseconds before the slide expires (Default: Empty)</li> <li><code>Priority</code>: Priority level for the slide (Default: Empty)</li> <li><code>Debug</code>: Boolean to enable debug logging for this slide player (Default: False)</li> </ul>"},{"location":"slide-player/#slide-player-system","title":"Slide Player System","text":"<p>The slide player system manages slide animations with the following features:</p> <ul> <li>Slides can be played in response to events</li> <li>Slide players are managed within the context of a mode</li> </ul>"},{"location":"slide-player/#events","title":"Events","text":"<p>The slide player system doesn't generate its own events, but it responds to events defined in your configuration.</p>"},{"location":"slide-player/#default-behavior","title":"Default Behavior","text":"<p>By default, slide players are configured with: - No events defined - Debug logging disabled</p>"},{"location":"slide-player/#notes","title":"Notes","text":"<ul> <li>Slide players are managed within the context of a mode</li> <li>The slide player system automatically handles slide playback</li> <li>Debug logging can be enabled to track slide player operations</li> <li>Slide players can be configured to work with specific game modes or features</li> </ul>"},{"location":"sound-player/","title":"Sound Player Configuration","text":"<p>The sound player configuration allows you to set up and customize sound playback in your pinball machine. Sound players are used to play sounds in response to events.</p>"},{"location":"sound-player/#configuration-options","title":"Configuration Options","text":""},{"location":"sound-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic sound player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SoundPlayer\n        With .EventName(\"event_name\")\n            .Sound = \"sound_name\"\n            .Action = \"play\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"sound-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced sound player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SoundPlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure sound events\n        With .EventName(\"target_hit\")\n            .Sound = \"target_sound\"\n            .Action = \"play\"\n            .Volume = 80\n            .Loops = 1\n            .Key = \"target_key\"\n        End With\n\n        With .EventName(\"multiball_start\")\n            .Sound = \"multiball_sound\"\n            .Action = \"play\"\n            .Volume = 100\n            .Loops = 0\n            .Key = \"multiball_key\"\n        End With\n\n        With .EventName(\"multiball_end\")\n            .Sound = \"multiball_end_sound\"\n            .Action = \"stop\"\n            .Key = \"multiball_key\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"sound-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"sound-player/#sound-settings","title":"Sound Settings","text":"<ul> <li><code>Sound</code>: The name of the sound to play</li> <li><code>Action</code>: Action to perform on the sound (\"play\" or \"stop\") (Default: \"play\")</li> <li><code>Volume</code>: Volume level for the sound (0-100) (Default: Empty)</li> <li><code>Loops</code>: Number of times to loop the sound (0 for infinite) (Default: Empty)</li> <li><code>Key</code>: Key to identify the sound for stopping (Default: Empty)</li> <li><code>Debug</code>: Boolean to enable debug logging for this sound player (Default: False)</li> </ul>"},{"location":"sound-player/#example-configurations","title":"Example Configurations","text":""},{"location":"sound-player/#basic-sound-player-example","title":"Basic Sound Player Example","text":"<pre><code>' Basic sound player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SoundPlayer\n        With .EventName(\"target_hit\")\n            .Sound = \"target_sound\"\n            .Action = \"play\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"sound-player/#advanced-sound-player-example","title":"Advanced Sound Player Example","text":"<pre><code>' Advanced sound player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .SoundPlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure sound events\n        With .EventName(\"jackpot_hit\")\n            .Sound = \"jackpot_sound\"\n            .Action = \"play\"\n            .Volume = 100\n            .Loops = 1\n            .Key = \"jackpot_key\"\n        End With\n\n        With .EventName(\"multiball_start\")\n            .Sound = \"multiball_sound\"\n            .Action = \"play\"\n            .Volume = 100\n            .Loops = 0\n            .Key = \"multiball_key\"\n        End With\n\n        With .EventName(\"multiball_end\")\n            .Sound = \"multiball_end_sound\"\n            .Action = \"stop\"\n            .Key = \"multiball_key\"\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"sound-player/#sound-player-system","title":"Sound Player System","text":"<p>The sound player system manages sound playback with the following features:</p> <ul> <li>Sounds can be played in response to events</li> <li>Sounds can be stopped in response to events</li> <li>Sounds can be configured with volume and loop settings</li> <li>Sounds can be identified by keys for stopping</li> <li>Sound players are managed within the context of a mode</li> </ul>"},{"location":"sound-player/#events","title":"Events","text":"<p>The sound player system doesn't generate its own events, but it responds to events defined in your configuration.</p>"},{"location":"sound-player/#default-behavior","title":"Default Behavior","text":"<p>By default, sound players are configured with: - No events defined - Debug logging disabled</p>"},{"location":"sound-player/#notes","title":"Notes","text":"<ul> <li>Sound players are managed within the context of a mode</li> <li>The sound player system automatically handles sound playback</li> <li>Debug logging can be enabled to track sound player operations</li> <li>Sound players can be configured to work with specific game modes or features</li> <li>The sound player system prevents sound conflicts</li> <li>Sounds must be defined in the sound system before they can be played</li> <li>The <code>Action</code> property determines whether a sound is played or stopped</li> <li>The <code>Key</code> property is used to identify sounds for stopping</li> <li>The <code>Volume</code> property can be used to adjust the volume of sounds</li> <li>The <code>Loops</code> property can be used to make sounds loop</li> <li>When a mode is deactivated, all sounds played by that mode are stopped </li> </ul>"},{"location":"state-machine/","title":"State Machine Configuration","text":"<p>The state machine configuration allows you to set up and customize state-based behavior in your pinball machine. State machines are used to manage complex game logic with multiple states and transitions.</p>"},{"location":"state-machine/#configuration-options","title":"Configuration Options","text":""},{"location":"state-machine/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic state machine configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .StateMachine(\"state_machine_name\")\n        ' Configure starting state\n        .StartingState = \"idle\"\n\n        ' Configure states\n        With .States(\"idle\")\n            .Label = \"Idle State\"\n        End With\n\n        With .States(\"active\")\n            .Label = \"Active State\"\n        End With\n\n        ' Configure transitions\n        With .Transitions\n            .Source = Array(\"idle\")\n            .Target = \"active\"\n            .Events = Array(\"start_event\")\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"state-machine/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced state machine configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .StateMachine(\"state_machine_name\")\n        ' Configure persistence\n        .PersistState = True\n\n        ' Configure starting state\n        .StartingState = \"idle\"\n\n        ' Configure debug\n        .Debug = True\n\n        ' Configure states\n        With .States(\"idle\")\n            .Label = \"Idle State\"\n            .EventsWhenStarted = Array(\"idle_state_started\")\n            .EventsWhenStopped = Array(\"idle_state_stopped\")\n            With .ShowWhenActive\n                .Show = \"idle_show\"\n                .Loops = 1\n                .Speed = 1.0\n            End With\n        End With\n\n        With .States(\"active\")\n            .Label = \"Active State\"\n            .EventsWhenStarted = Array(\"active_state_started\")\n            .EventsWhenStopped = Array(\"active_state_stopped\")\n            With .ShowWhenActive\n                .Show = \"active_show\"\n                .Loops = 0\n                .Speed = 1.0\n            End With\n        End With\n\n        With .States(\"complete\")\n            .Label = \"Complete State\"\n            .EventsWhenStarted = Array(\"complete_state_started\")\n            .EventsWhenStopped = Array(\"complete_state_stopped\")\n            With .ShowWhenActive\n                .Show = \"complete_show\"\n                .Loops = 1\n                .Speed = 1.0\n            End With\n        End With\n\n        ' Configure transitions\n        With .Transitions\n            .Source = Array(\"idle\")\n            .Target = \"active\"\n            .Events = Array(\"start_event\")\n            .EventsWhenTransitioning = Array(\"transitioning_to_active\")\n        End With\n\n        With .Transitions\n            .Source = Array(\"active\")\n            .Target = \"complete\"\n            .Events = Array(\"complete_event\")\n            .EventsWhenTransitioning = Array(\"transitioning_to_complete\")\n        End With\n\n        With .Transitions\n            .Source = Array(\"complete\")\n            .Target = \"idle\"\n            .Events = Array(\"reset_event\")\n            .EventsWhenTransitioning = Array(\"transitioning_to_idle\")\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"state-machine/#property-descriptions","title":"Property Descriptions","text":""},{"location":"state-machine/#state-machine-settings","title":"State Machine Settings","text":"<ul> <li><code>StartingState</code>: The state to start in when the state machine is activated (Default: \"start\")</li> <li><code>PersistState</code>: Whether to persist the state between balls (Default: False)</li> <li><code>Debug</code>: Boolean to enable debug logging for this state machine (Default: False)</li> </ul>"},{"location":"state-machine/#state-settings","title":"State Settings","text":"<ul> <li><code>Label</code>: A human-readable label for the state</li> <li><code>EventsWhenStarted</code>: Array of events to fire when the state starts</li> <li><code>EventsWhenStopped</code>: Array of events to fire when the state stops</li> <li><code>ShowWhenActive</code>: Show to play when the state is active</li> <li><code>InternalCacheId</code>: Internal cache ID for the state</li> </ul>"},{"location":"state-machine/#transition-settings","title":"Transition Settings","text":"<ul> <li><code>Source</code>: Array of source states that can transition to the target state</li> <li><code>Target</code>: The target state to transition to</li> <li><code>Events</code>: Array of events that trigger the transition</li> <li><code>EventsWhenTransitioning</code>: Array of events to fire when transitioning</li> </ul>"},{"location":"state-machine/#example-configurations","title":"Example Configurations","text":""},{"location":"state-machine/#basic-state-machine-example","title":"Basic State Machine Example","text":"<pre><code>' Basic state machine configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .StateMachine(\"ramp_state\")\n        ' Configure starting state\n        .StartingState = \"idle\"\n\n        ' Configure states\n        With .States(\"idle\")\n            .Label = \"Idle State\"\n        End With\n\n        With .States(\"active\")\n            .Label = \"Active State\"\n        End With\n\n        ' Configure transitions\n        With .Transitions\n            .Source = Array(\"idle\")\n            .Target = \"active\"\n            .Events = Array(\"ramp_enter\")\n        End With\n\n        With .Transitions\n            .Source = Array(\"active\")\n            .Target = \"idle\"\n            .Events = Array(\"ramp_exit\")\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"state-machine/#advanced-state-machine-example","title":"Advanced State Machine Example","text":"<pre><code>' Advanced state machine configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .StateMachine(\"jackpot_state\")\n        ' Configure persistence\n        .PersistState = True\n\n        ' Configure starting state\n        .StartingState = \"idle\"\n\n        ' Configure debug\n        .Debug = True\n\n        ' Configure states\n        With .States(\"idle\")\n            .Label = \"Idle State\"\n            .EventsWhenStarted = Array(\"jackpot_idle\")\n            With .ShowWhenActive\n                .Show = \"jackpot_idle_show\"\n                .Loops = 1\n                .Speed = 1.0\n            End With\n        End With\n\n        With .States(\"collecting\")\n            .Label = \"Collecting Jackpot\"\n            .EventsWhenStarted = Array(\"jackpot_collecting\")\n            With .ShowWhenActive\n                .Show = \"jackpot_collecting_show\"\n                .Loops = 0\n                .Speed = 1.0\n            End With\n        End With\n\n        With .States(\"complete\")\n            .Label = \"Jackpot Complete\"\n            .EventsWhenStarted = Array(\"jackpot_complete\")\n            With .ShowWhenActive\n                .Show = \"jackpot_complete_show\"\n                .Loops = 1\n                .Speed = 1.0\n            End With\n        End With\n\n        ' Configure transitions\n        With .Transitions\n            .Source = Array(\"idle\")\n            .Target = \"collecting\"\n            .Events = Array(\"jackpot_start\")\n            .EventsWhenTransitioning = Array(\"starting_jackpot\")\n        End With\n\n        With .Transitions\n            .Source = Array(\"collecting\")\n            .Target = \"complete\"\n            .Events = Array(\"jackpot_collected\")\n            .EventsWhenTransitioning = Array(\"completing_jackpot\")\n        End With\n\n        With .Transitions\n            .Source = Array(\"complete\")\n            .Target = \"idle\"\n            .Events = Array(\"jackpot_reset\")\n            .EventsWhenTransitioning = Array(\"resetting_jackpot\")\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"state-machine/#state-machine-system","title":"State Machine System","text":"<p>The state machine system manages state-based behavior with the following features:</p> <ul> <li>States can be defined with labels, events, and shows</li> <li>Transitions can be defined between states</li> <li>States can fire events when started or stopped</li> <li>Transitions can fire events when transitioning</li> <li>Shows can be played when a state is active</li> <li>State machines can persist their state between balls</li> <li>State machines are managed within the context of a mode</li> </ul>"},{"location":"state-machine/#events","title":"Events","text":"<p>The state machine system generates the following events:</p> <ul> <li>Events defined in <code>EventsWhenStarted</code> when a state starts</li> <li>Events defined in <code>EventsWhenStopped</code> when a state stops</li> <li>Events defined in <code>EventsWhenTransitioning</code> when transitioning between states</li> </ul>"},{"location":"state-machine/#default-behavior","title":"Default Behavior","text":"<p>By default, state machines are configured with: - Starting state of \"start\" - No persistence between balls - No states defined - No transitions defined - Debug logging disabled</p>"},{"location":"state-machine/#notes","title":"Notes","text":"<ul> <li>State machines are managed within the context of a mode</li> <li>The state machine system automatically handles state transitions</li> <li>Debug logging can be enabled to track state machine operations</li> <li>State machines can be configured to work with specific game modes or features</li> <li>The state machine system prevents state conflicts</li> <li>State persistence is useful for maintaining state between balls</li> <li>Shows can be used to provide visual feedback for the current state</li> <li>Events can be used to trigger actions when states change</li> <li>Transitions can be triggered by multiple events</li> <li>Multiple source states can transition to the same target state </li> </ul>"},{"location":"tilt/","title":"Tilt Configuration","text":"<p>The tilt configuration allows you to set up and customize tilt behavior in your pinball machine. The tilt system manages tilt warnings, tilt events, and slam tilts.</p>"},{"location":"tilt/#configuration-options","title":"Configuration Options","text":""},{"location":"tilt/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic tilt configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Tilt\n        .WarningsToTilt = 3\n        .SettleTime = 5000  ' 5000 milliseconds (5 seconds) settle time\n        .MultipleHitWindow = 1000  ' 1000 milliseconds (1 second) multiple hit window\n        .ResetWarningEvents = Array(\"reset_warnings_event\")\n        .TiltWarningEvents = Array(\"tilt_warning_event\")\n        .TiltEvents = Array(\"tilt_event\")\n        .TiltSlamTiltEvents = Array(\"slam_tilt_event\")\n    End With\nEnd With\n</code></pre>"},{"location":"tilt/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced tilt configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Tilt\n        ' Configure tilt settings\n        .WarningsToTilt = 3\n        .SettleTime = 5000  ' 5000 milliseconds (5 seconds) settle time\n        .MultipleHitWindow = 1000  ' 1000 milliseconds (1 second) multiple hit window\n\n        ' Configure events\n        .ResetWarningEvents = Array(\"reset_warnings_event1\", \"reset_warnings_event2\")\n        .TiltWarningEvents = Array(\"tilt_warning_event1\", \"tilt_warning_event2\")\n        .TiltEvents = Array(\"tilt_event1\", \"tilt_event2\")\n        .TiltSlamTiltEvents = Array(\"slam_tilt_event1\", \"slam_tilt_event2\")\n\n        ' Configure debug\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"tilt/#property-descriptions","title":"Property Descriptions","text":""},{"location":"tilt/#tilt-settings","title":"Tilt Settings","text":"<ul> <li><code>WarningsToTilt</code>: Number of warnings before a tilt occurs (Default: 0)</li> <li><code>SettleTime</code>: Time in milliseconds to wait before clearing a tilt (Default: 0)</li> <li><code>MultipleHitWindow</code>: Time window in milliseconds for multiple hits to count as one warning (Default: 0)</li> <li><code>ResetWarningEvents</code>: Array of events that reset the tilt warnings</li> <li><code>TiltWarningEvents</code>: Array of events that trigger a tilt warning</li> <li><code>TiltEvents</code>: Array of events that trigger a tilt</li> <li><code>TiltSlamTiltEvents</code>: Array of events that trigger a slam tilt</li> <li><code>Debug</code>: Boolean to enable debug logging for this tilt system (Default: False)</li> </ul>"},{"location":"tilt/#example-configurations","title":"Example Configurations","text":""},{"location":"tilt/#basic-tilt-example","title":"Basic Tilt Example","text":"<pre><code>' Basic tilt configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Tilt\n        .WarningsToTilt = 3\n        .SettleTime = 5000  ' 5000 milliseconds (5 seconds) settle time\n        .MultipleHitWindow = 1000  ' 1000 milliseconds (1 second) multiple hit window\n        .ResetWarningEvents = Array(\"reset_warnings\")\n        .TiltWarningEvents = Array(\"tilt_warning\")\n        .TiltEvents = Array(\"tilt\")\n        .TiltSlamTiltEvents = Array(\"slam_tilt\")\n    End With\nEnd With\n</code></pre>"},{"location":"tilt/#advanced-tilt-example","title":"Advanced Tilt Example","text":"<pre><code>' Advanced tilt configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Tilt\n        ' Configure tilt settings\n        .WarningsToTilt = 3\n        .SettleTime = 5000  ' 5000 milliseconds (5 seconds) settle time\n        .MultipleHitWindow = 1000  ' 1000 milliseconds (1 second) multiple hit window\n\n        ' Configure events\n        .ResetWarningEvents = Array(\"reset_warnings\", \"ball_started\")\n        .TiltWarningEvents = Array(\"tilt_warning_switch\", \"tilt_warning_event\")\n        .TiltEvents = Array(\"tilt_switch\", \"tilt_event\")\n        .TiltSlamTiltEvents = Array(\"slam_tilt_switch\", \"slam_tilt_event\")\n\n        ' Configure debug\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"tilt/#tilt-system","title":"Tilt System","text":"<p>The tilt system manages tilt behavior with the following features:</p> <ul> <li>Tilt warnings can be configured with a specific count before a tilt occurs</li> <li>Tilt warnings can be reset by specific events</li> <li>Tilt events can be triggered by specific events</li> <li>Slam tilt events can be triggered by specific events</li> <li>The system tracks the number of tilt warnings for each player</li> <li>The system manages the tilt settle time</li> <li>The system prevents multiple tilt warnings within a short time window</li> <li>The tilt system is managed within the context of a mode</li> </ul>"},{"location":"tilt/#events","title":"Events","text":"<p>The tilt system generates the following events:</p> <ul> <li><code>tilt_warning</code>: Fired when a tilt warning occurs</li> <li><code>tilt_warning_X</code>: Fired when the Xth tilt warning occurs</li> <li><code>tilt</code>: Fired when a tilt occurs</li> <li><code>slam_tilt</code>: Fired when a slam tilt occurs</li> <li><code>tilt_clear</code>: Fired when a tilt is cleared</li> </ul>"},{"location":"tilt/#default-behavior","title":"Default Behavior","text":"<p>By default, the tilt system is configured with: - No warnings to tilt (WarningsToTilt = 0) - No settle time (SettleTime = 0) - No multiple hit window (MultipleHitWindow = 0) - No reset warning events - No tilt warning events - No tilt events - No slam tilt events - Debug logging disabled</p>"},{"location":"tilt/#notes","title":"Notes","text":"<ul> <li>The tilt system is managed within the context of a mode</li> <li>The tilt system automatically handles tilt warnings and tilts</li> <li>Debug logging can be enabled to track tilt operations</li> <li>The tilt system can be configured to work with specific game modes or features</li> <li>The tilt system prevents tilt conflicts</li> <li>Tilt warnings are tracked per player</li> <li>Tilt warnings are reset when a new ball starts</li> <li>The settle time is used to prevent immediate re-tilting</li> <li>The multiple hit window prevents rapid-fire tilt warnings</li> <li>When a tilt occurs, the current ball ends and all balls drain</li> <li>When all balls have drained, the tilt is cleared after the settle time </li> </ul>"},{"location":"timed-switches/","title":"Timed Switches Configuration","text":"<p>The timed switches configuration allows you to set up and customize switches that activate after a specified delay in your pinball machine. Timed switches are useful for creating delayed reactions to switch hits.</p>"},{"location":"timed-switches/#configuration-options","title":"Configuration Options","text":""},{"location":"timed-switches/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic timed switches configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .TimedSwitches(\"timed_switch_name\")\n        .Time = 1000  ' 1000 milliseconds (1 second) delay\n        .Switches = Array(\"sw01\", \"sw02\")\n        .EventsWhenActive = Array(\"timed_switch_active\")\n        .EventsWhenReleased = Array(\"timed_switch_released\")\n    End With\nEnd With\n</code></pre>"},{"location":"timed-switches/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced timed switches configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .TimedSwitches(\"timed_switch_name\")\n        ' Configure delay time\n        .Time = 2000  ' 2000 milliseconds (2 seconds) delay\n\n        ' Configure switches to monitor\n        .Switches = Array(\"sw01\", \"sw02\", \"sw03\")\n\n        ' Configure events\n        .EventsWhenActive = Array(\"timed_switch_active\", \"multiball_start\")\n        .EventsWhenReleased = Array(\"timed_switch_released\", \"multiball_end\")\n\n        ' Configure debug\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"timed-switches/#property-descriptions","title":"Property Descriptions","text":""},{"location":"timed-switches/#timed-switch-settings","title":"Timed Switch Settings","text":"<ul> <li><code>Time</code>: The delay in milliseconds before a switch is considered active (Default: 0)</li> <li><code>Switches</code>: Array of switch names to monitor</li> <li><code>EventsWhenActive</code>: Array of events to fire when any of the switches become active</li> <li><code>EventsWhenReleased</code>: Array of events to fire when all switches are released</li> <li><code>Debug</code>: Boolean to enable debug logging for this timed switch (Default: False)</li> </ul>"},{"location":"timed-switches/#example-configurations","title":"Example Configurations","text":""},{"location":"timed-switches/#basic-timed-switch-example","title":"Basic Timed Switch Example","text":"<pre><code>' Basic timed switch configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .TimedSwitches(\"ramp_switch\")\n        .Time = 1000  ' 1000 milliseconds (1 second) delay\n        .Switches = Array(\"sw_ramp\")\n        .EventsWhenActive = Array(\"ramp_active\")\n        .EventsWhenReleased = Array(\"ramp_released\")\n    End With\nEnd With\n</code></pre>"},{"location":"timed-switches/#advanced-timed-switch-example","title":"Advanced Timed Switch Example","text":"<pre><code>' Advanced timed switch configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .TimedSwitches(\"jackpot_switch\")\n        ' Configure delay time\n        .Time = 2000  ' 2000 milliseconds (2 seconds) delay\n\n        ' Configure switches to monitor\n        .Switches = Array(\"sw_jackpot1\", \"sw_jackpot2\", \"sw_jackpot3\")\n\n        ' Configure events\n        .EventsWhenActive = Array(\"jackpot_active\", \"jackpot_ready\")\n        .EventsWhenReleased = Array(\"jackpot_released\", \"jackpot_reset\")\n\n        ' Configure debug\n        .Debug = True\n    End With\nEnd With\n</code></pre>"},{"location":"timed-switches/#timed-switch-system","title":"Timed Switch System","text":"<p>The timed switch system manages delayed switch activation with the following features:</p> <ul> <li>Switches can be configured to activate after a specified delay</li> <li>Multiple switches can be monitored simultaneously</li> <li>Events can be fired when switches become active or are released</li> <li>The system tracks which switches are currently active</li> <li>Timed switches are managed within the context of a mode</li> </ul>"},{"location":"timed-switches/#events","title":"Events","text":"<p>The timed switch system generates the following events:</p> <ul> <li>Events defined in <code>EventsWhenActive</code> when any of the switches become active</li> <li>Events defined in <code>EventsWhenReleased</code> when all switches are released</li> </ul>"},{"location":"timed-switches/#default-behavior","title":"Default Behavior","text":"<p>By default, timed switches are configured with: - No delay (Time = 0) - No switches to monitor - No events when active or released - Debug logging disabled</p>"},{"location":"timed-switches/#notes","title":"Notes","text":"<ul> <li>Timed switches are managed within the context of a mode</li> <li>The timed switch system automatically handles switch activation and release</li> <li>Debug logging can be enabled to track timed switch operations</li> <li>Timed switches can be configured to work with specific game modes or features</li> <li>The timed switch system prevents switch conflicts</li> <li>The delay is applied to each switch individually</li> <li>A switch is considered active only after the delay has passed</li> <li>All switches must be released before the release events are fired</li> <li>The system automatically removes any pending delays when a switch is released </li> </ul>"},{"location":"timer/","title":"Timer Configuration","text":"<p>The timer configuration allows you to set up and customize countdown or count-up timers in your pinball machine. Timers are useful for creating time-limited modes, bonus rounds, and other time-based events.</p>"},{"location":"timer/#configuration-overview","title":"Configuration Overview","text":"<p>Timers are always managed within the context of a mode. The mode itself is responsible for starting and stopping, and you can configure the timer to start running automatically or control it via events and control actions.</p>"},{"location":"timer/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic timer configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .Timer(\"timer_name\")\n        .StartRunning = True         ' Start timer automatically when mode starts\n        .Direction = \"down\"         ' Count down\n        .StartValue = 10            ' Start at 10\n        .EndValue = 0               ' End at 0\n        .TickInterval = 1000        ' Tick every 1 second\n    End With\nEnd With\n</code></pre>"},{"location":"timer/#controlling-the-timer-with-events","title":"Controlling the Timer with Events","text":"<p>You can control the timer dynamically using control events. For example, you can add time, pause, or change the tick interval:</p> <pre><code>With .Timer(\"timer_name\")\n    ' ... basic config ...\n    With .ControlEvents\n        .EventName = \"add_time\"\n        .Action = \"add\"\n        .Value = 5000   ' Add 5000 ticks (or ms, depending on your logic)\n    End With\n    With .ControlEvents\n        .EventName = \"pause_timer\"\n        .Action = \"pause\"\n        .Value = 2000   ' Pause for 2 seconds\n    End With\nEnd With\n</code></pre>"},{"location":"timer/#property-descriptions","title":"Property Descriptions","text":""},{"location":"timer/#timer-settings","title":"Timer Settings","text":"<ul> <li><code>StartRunning</code>: Boolean, if true, timer starts automatically when the mode starts</li> <li><code>Direction</code>: Direction of the timer (\"up\" or \"down\") (Default: \"down\")</li> <li><code>StartValue</code>: Initial value of the timer (Default: 10)</li> <li><code>EndValue</code>: Final value of the timer (Default: 0)</li> <li><code>TickInterval</code>: Interval between timer ticks in milliseconds (Default: 1000)</li> </ul>"},{"location":"timer/#control-events","title":"Control Events","text":"<ul> <li><code>ControlEvents</code>: Configure actions (add, subtract, pause, etc.) that can be triggered by events</li> </ul>"},{"location":"timer/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this timer (Default: False)</li> </ul>"},{"location":"timer/#example-configuration","title":"Example Configuration","text":"<pre><code>With CreateGlfMode(\"hurry_up\", 10)\n    .StartEvents = Array(\"hurry_up_start\")\n    .StopEvents = Array(\"timer_hurry_up_complete\")\n\n    With .Timer(\"hurry_up_timer\")\n        .StartRunning = True\n        .Direction = \"down\"\n        .StartValue = 15\n        .EndValue = 0\n        .TickInterval = 1000\n    End With\nEnd With\n</code></pre>"},{"location":"timer/#timer-system-features","title":"Timer System Features","text":"<ul> <li>Timers can count up or down</li> <li>Timers can be started automatically or controlled by events/actions</li> <li>Timers can have configurable tick intervals</li> <li>Timers can trigger events when they complete</li> <li>Timers are managed within the context of a mode</li> </ul>"},{"location":"timer/#timer-events","title":"Timer Events","text":"<p>The timer system generates the following events: - <code>timer_name_started</code>: Fired when the timer starts - <code>timer_name_stopped</code>: Fired when the timer stops - <code>timer_name_complete</code>: Fired when the timer reaches its end value - <code>timer_name_tick</code>: Fired on each timer tick</p>"},{"location":"timer/#default-behavior","title":"Default Behavior","text":"<p>By default, timers are configured with: - Not running until started by the mode or a control event - Down direction - Start value of 10 - End value of 0 - Tick interval of 1000 milliseconds (1 second) - Debug logging disabled</p>"},{"location":"timer/#notes","title":"Notes","text":"<ul> <li>Timers are managed within the context of a mode</li> <li>The timer system automatically handles timer ticks and completion</li> <li>Debug logging can be enabled to track timer operations</li> <li>Timers can be configured to work with specific game modes or features</li> <li>The timer system prevents timers from conflicting with each other</li> <li>Countdown timers are useful for creating urgency in game modes</li> <li>Count-up timers are useful for tracking elapsed time</li> <li>Tick events can be used to update displays or trigger other events</li> <li>Timer completion events can be used to end modes or trigger rewards</li> </ul>"},{"location":"variable-player/","title":"Variable Player Configuration","text":"<p>The variable player configuration allows you to set up and customize variable manipulation in your game. Variable players are used to modify player and machine variables based on events.</p>"},{"location":"variable-player/#configuration-options","title":"Configuration Options","text":""},{"location":"variable-player/#basic-configuration","title":"Basic Configuration","text":"<pre><code>' Basic variable player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .VariablePlayer\n        With .EventName(\"event_name\")\n            With .Variable(\"variable_name\")\n                .Action = \"add\"\n                .Int = 100\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"variable-player/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>' Advanced variable player configuration within a mode\nWith CreateGlfMode(\"mode_name\", priority)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .VariablePlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure player variable events\n        With .EventName(\"ramp_complete\")\n            With .Variable(\"score\")\n                .Action = \"add\"\n                .Int = 1000\n            End With\n            With .Variable(\"ramps_completed\")\n                .Action = \"add\"\n                .Int = 1\n            End With\n        End With\n\n        ' Configure machine variable events\n        With .EventName(\"multiball_start\")\n            With .Variable(\"multiball_count\")\n                .Action = \"add_machine\"\n                .Int = 1\n            End With\n        End With\n\n        ' Configure variable setting events\n        With .EventName(\"game_over\")\n            With .Variable(\"high_score\")\n                .Action = \"set\"\n                .Int = 50000\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"variable-player/#property-descriptions","title":"Property Descriptions","text":""},{"location":"variable-player/#variable-actions","title":"Variable Actions","text":"<ul> <li><code>Action</code>: Action to perform on the variable</li> <li><code>add</code>: Add a value to a player variable</li> <li><code>add_machine</code>: Add a value to a machine variable</li> <li><code>set</code>: Set a player variable to a specific value</li> <li><code>set_machine</code>: Set a machine variable to a specific value</li> </ul>"},{"location":"variable-player/#variable-types","title":"Variable Types","text":"<ul> <li><code>Int</code>: Integer value</li> <li><code>Float</code>: Floating-point value</li> <li><code>String</code>: String value</li> </ul>"},{"location":"variable-player/#debug-settings","title":"Debug Settings","text":"<ul> <li><code>Debug</code>: Boolean to enable debug logging for this variable player (Default: False)</li> </ul>"},{"location":"variable-player/#example-configurations","title":"Example Configurations","text":""},{"location":"variable-player/#basic-variable-player-example","title":"Basic Variable Player Example","text":"<pre><code>' Basic variable player configuration within a mode\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .VariablePlayer\n        With .EventName(\"target_hit\")\n            With .Variable(\"score\")\n                .Action = \"add\"\n                .Int = 100\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"variable-player/#advanced-variable-player-example","title":"Advanced Variable Player Example","text":"<pre><code>' Advanced variable player configuration within a mode\nWith CreateGlfMode(\"multiball\", 20)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .VariablePlayer\n        ' Configure debug\n        .Debug = True\n\n        ' Configure player variable events\n        With .EventName(\"jackpot_hit\")\n            With .Variable(\"score\")\n                .Action = \"add\"\n                .Int = 5000\n            End With\n            With .Variable(\"jackpots_collected\")\n                .Action = \"add\"\n                .Int = 1\n            End With\n        End With\n\n        ' Configure machine variable events\n        With .EventName(\"multiball_start\")\n            With .Variable(\"multiball_active\")\n                .Action = \"set_machine\"\n                .Int = 1\n            End With\n        End With\n\n        With .EventName(\"multiball_end\")\n            With .Variable(\"multiball_active\")\n                .Action = \"set_machine\"\n                .Int = 0\n            End With\n        End With\n    End With\nEnd With\n</code></pre>"},{"location":"variable-player/#machine-variables","title":"Machine Variables","text":"<p>Machine variables are persistent across games and can be created using the <code>CreateMachineVar</code> function:</p> <pre><code>' Create a machine variable\nDim high_score\nSet high_score = CreateMachineVar(\"high_score\")\nhigh_score.InitialValue = 0\nhigh_score.Persist = True\nhigh_score.ValueType = \"int\"\n</code></pre>"},{"location":"variable-player/#variable-player-system","title":"Variable Player System","text":"<p>The variable player system manages variable manipulation with the following features:</p> <ul> <li>Variables can be modified based on events</li> <li>Both player and machine variables can be manipulated</li> <li>Variables can be added to or set to specific values</li> <li>Variables are managed within the context of a mode</li> </ul>"},{"location":"variable-player/#events","title":"Events","text":"<p>The variable player system doesn't generate its own events, but it responds to events defined in your configuration.</p>"},{"location":"variable-player/#default-behavior","title":"Default Behavior","text":"<p>By default, variable players are configured with: - No events defined - Debug logging disabled</p>"},{"location":"variable-player/#notes","title":"Notes","text":"<ul> <li>Variable players are managed within the context of a mode</li> <li>The variable player system automatically handles variable manipulation</li> <li>Debug logging can be enabled to track variable player operations</li> <li>Variable players can be configured to work with specific game modes or features</li> <li>The variable player system prevents variable conflicts</li> <li>Player variables are reset when a new game starts</li> <li>Machine variables persist across games if the <code>Persist</code> property is set to <code>True</code></li> <li>The <code>add</code> action is useful for incrementing scores or counters</li> <li>The <code>set</code> action is useful for resetting or initializing variables </li> </ul>"},{"location":"tutorial/tutorial-autofire/","title":"Tutorial - Auto Fire Devices","text":"<p>See Auto Fire Devices Config Reference</p>"},{"location":"tutorial/tutorial-autofire/#introduction","title":"Introduction","text":""},{"location":"tutorial/tutorial-autofire/#configuration","title":"Configuration","text":"<pre><code>Sub ConfigureGlfDevices\n\n    ' Slingshots\n    With CreateGlfAutoFireDevice(\"left_sling\")\n        .Switch = \"s_LeftSlingshot\"\n        .ActionCallback = \"LeftSlingshotAction\"\n        .DisabledCallback = \"LeftSlingshotDisabled\"\n        .EnabledCallback = \"LeftSlingshotEnabled\"\n        .DisableEvents = Array(\"kill_flippers\")\n        .EnableEvents = Array(\"ball_started\",\"enable_flippers\")\n    End With\n\n    With CreateGlfAutoFireDevice(\"right_sling\")\n        .Switch = \"s_RightSlingshot\"\n        .ActionCallback = \"RightSlingshotAction\"\n        .DisabledCallback = \"RightSlingshotDisabled\"\n        .EnabledCallback = \"RightSlingshotEnabled\"\n        .DisableEvents = Array(\"kill_flippers\")\n        .EnableEvents = Array(\"ball_started\",\"enable_flippers\")\n    End With\n\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-ball-devices/","title":"Tutorial - Ball Devices","text":"<p>Ball devices are anything in your game that capture balls from the playfield. These can be scoops, vuks (vertical up kickers), troughs, plungers, multiball locks e.t.c. </p> <p>See Ball Device Config Reference</p> <p>Below is an image of Cyber Race pinball. Apart from the trough and plunger it has four circled ball devices. There are three vuks and one scoop. All of these devices collect, hold balls and release them.</p> <p></p>"},{"location":"tutorial/tutorial-ball-devices/#setup","title":"Setup","text":"<p>A ball device will need a switch to determine when a ball has entered and some way of holding the ball physically. There are many ways to do this in VPX such as using a kicker object or building an enclosure with walls. </p>"},{"location":"tutorial/tutorial-ball-devices/#configuration","title":"Configuration","text":"<p>To configure your device add the config below to your Configure Glf Devices Sub.</p> <pre><code>Sub ConfigureGlfDevices\n\n    ' Scoop\n    With CreateGlfBallDevice(\"scoop\")\n        .BallSwitches = Array(\"sw04\")\n        .EjectTimeout = 2000\n        .EjectCallback = \"ScoopEjectCallback\"\n    End With\n\n    'Other device config....\nEnd Sub\n</code></pre> <p>The above configuration sets up the scoop device with a switch called sw04. When the ball enters the scoop and the game is expecting the ball to enter, the ball will be held until released by the system. Once released it will be ejected by calling the EjectCallback function. This is a function you define which will kick the ball in the direction you wish.</p>"},{"location":"tutorial/tutorial-ball-devices/#next-steps","title":"Next Steps","text":"<p>Example Ball Save</p>"},{"location":"tutorial/tutorial-ballsave/","title":"Tutorial - Ball Save","text":"<p>Lets add a ball save to our table. A ball save is a logic block that monitors if the balls drains while it is active. If it does, the ball will not end and a new ball will be released from the trough.</p>"},{"location":"tutorial/tutorial-ballsave/#configuration","title":"Configuration","text":"<p>To configure your ball save we need a mode for it live under. Create the following config to create a mode and a ball save logic block</p>"},{"location":"tutorial/tutorial-ballsave/#ball-save-config","title":"Ball Save Config","text":"<pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        With BallSaves(\"base\")\n            .EnableEvents = Array(\"mode_base_started\")\n            .TimerStartEvents = Array(\"balldevice_plunger_ball_eject_success\")\n            .ActiveTime = 15000\n            .HurryUpTime = 5000\n            .GracePeriod = 3000\n            .BallsToSave = -1\n            .AutoLaunch = True\n        End With\n    End With\nEnd Sub\n</code></pre> <p>As you can see from the settings above the ball save will be active for 15 seconds once the ball has successfully been ejected from the plunger lane, it has a grace period of 3 seconds meaning that it will actually be active for 18 seconds in total and it will save an unlimited about of balls as long as it is active.</p>"},{"location":"tutorial/tutorial-ballsave/#enabling-the-mode","title":"Enabling the Mode","text":"<p>Finally we need to enable this mode in our game by calling the <code>CreateBaseMode</code> sub in our <code>CongifureGlfDevices</code> Sub.</p> <pre><code>Sub ConfigureGlfDevices\n\n    CreateBaseMode() '&lt;---Add this to enable the mode\n\n    'Other device config....\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-event-player/","title":"Tutorial - Event Player","text":"<p>The Event Player is a powerful component in the VPX Game Logic Framework that allows you to create complex event chains where one event can trigger multiple other events. This tutorial will show you how to use the Event Player to create sophisticated game logic with minimal code.</p>"},{"location":"tutorial/tutorial-event-player/#what-is-the-event-player","title":"What is the Event Player?","text":"<p>The Event Player listens for specific events and automatically dispatches other events in response. This is useful for:</p> <ul> <li>Creating reusable event patterns</li> <li>Simplifying complex event handling logic</li> <li>Responding to game state changes with multiple actions</li> <li>Creating conditional event chains based on game conditions</li> </ul>"},{"location":"tutorial/tutorial-event-player/#basic-event-playing","title":"Basic Event Playing","text":"<pre><code>' Mode-specific event player configuration\nWith CreateGlfMode(\"shoot_here\", 20)\n    .StartEvents = Array(\"mode_shoot_here_started\")\n    .StopEvents = Array(\"mode_shoot_here_stopped\")\n\n    With .EventPlayer\n        ' When the mode starts, reset the upper target\n        .Add \"mode_shoot_here_started\", Array(\"cmd_upper_target_reset\")\n    End With\nEnd With\n</code></pre> <p>In this example, when the \"shoot_here\" mode starts, the Event Player will automatically reset the upper target.</p>"},{"location":"tutorial/tutorial-event-player/#conditional-event-playing","title":"Conditional Event Playing","text":"<p>The Event Player can also use conditions to determine when to dispatch events. This allows for more precise control over when events are played:</p> <pre><code>' Conditional event player configuration\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        ' Only start super bonus round and play rich show if score is over 10000\n        .Add \"mode_base_started{current_player.score&gt;10000}\", Array(\"start_mode_superbonusround\", \"play_show_richy_rich\")\n\n        ' Choose different battle modes based on achievement state\n        .Add \"start_mode_battle{device.achievements.ironthrone.state!='completed'}\", Array(\"start_mode_choose_battle\")\n        .Add \"start_mode_battle{device.achievements.ironthrone.state=='completed'}\", Array(\"start_mode_victory_lap\")\n    End With\nEnd With\n</code></pre> <p>In this example: - The <code>start_mode_superbonusround</code> and <code>play_show_richy_rich</code> events will only be dispatched if the player's score is over 10,000 when the base mode starts - The <code>start_mode_choose_battle</code> event will be dispatched if the \"ironthrone\" achievement is not completed - The <code>start_mode_victory_lap</code> event will be dispatched if the \"ironthrone\" achievement is completed</p> <p>You can also apply conditions to individual events within a list:</p> <pre><code>' Conditional events within a list\nWith CreateGlfMode(\"base\", 10)\n    .StartEvents = Array(\"ball_started\")\n    .StopEvents = Array(\"ball_ended\")\n\n    With .EventPlayer\n        .Add \"reenable_nonrecruit_modes\", Array( _\n            \"start_mode_shadowbroker_base\", _\n            \"start_mode_n7_assignments\", _\n            \"start_mode_overlordlight{device.achievements.collectorship.state!='complete'}\", _\n            \"start_mode_arrival{device.achievements.collectorship.state=='complete'}\", _\n            \"start_mode_shopping{current_player.cash&gt;=1000}\" _\n        )\n    End With\nEnd With\n</code></pre> <p>In this example: - <code>start_mode_shadowbroker_base</code> and <code>start_mode_n7_assignments</code> will always be dispatched - Either <code>start_mode_overlordlight</code> or <code>start_mode_arrival</code> will be dispatched, depending on the state of the \"collectorship\" achievement - <code>start_mode_shopping</code> will only be dispatched if the player's cash is at least 1000</p>"},{"location":"tutorial/tutorial-event-player/#dynamic-values-in-events","title":"Dynamic Values in Events","text":"<p>The Event Player supports dynamic values in event names and arguments, allowing for even more flexibility:</p>"},{"location":"tutorial/tutorial-event-player/#dynamic-event-names","title":"Dynamic Event Names","text":"<p>You can include dynamic values in event names using parentheses:</p> <pre><code>' Dynamic event names\nWith CreateGlfMode(\"dynamo\", 30)\n    .StartEvents = Array(\"mode_dynamo_started\")\n    .StopEvents = Array(\"mode_dynamo_stopped\")\n\n    With .EventPlayer\n        ' Use player variables in event names\n        .Add \"mode_dynamo_started\", Array(\"play_dynamo_show_phase_(current_player.phase_name)\")\n\n        ' Use device states in event names\n        .Add \"mode_dynamo_started\", Array(\"dynamo_started_with_state_(device.achievements.dynamo.state)\")\n\n        ' Use conditional expressions in event names\n        .Add \"mode_dynamo_started\", Array(\"player_score_is_('high' if current_player.score &gt; 10000 else 'low')\")\n    End With\nEnd With\n</code></pre> <p>In this example: - If <code>current_player.phase_name</code> is \"attackwave\", the event <code>play_dynamo_show_phase_attackwave</code> will be dispatched - If the \"dynamo\" achievement is completed, the event <code>dynamo_started_with_state_completed</code> will be dispatched - If the player's score is over 10,000, the event <code>player_score_is_high</code> will be dispatched, otherwise <code>player_score_is_low</code> will be dispatched</p>"},{"location":"tutorial/tutorial-event-player/#dynamic-event-arguments","title":"Dynamic Event Arguments","text":"<p>You can also include dynamic values as arguments to events:</p> <pre><code>' Dynamic event arguments\nWith CreateGlfMode(\"dynamo\", 30)\n    .StartEvents = Array(\"mode_dynamo_started\")\n    .StopEvents = Array(\"mode_dynamo_stopped\")\n\n    With .EventPlayer\n        ' Set environment sounds with a specific name\n        .Add \"mode_dynamo_started\", Array(\"set_environment_sounds:env_name=driving\")\n\n        ' Set initial laps count\n        .Add \"mode_dynamo_started\", Array(\"set_initial_laps_count:count=10\")\n\n        ' Use dynamic values for event arguments\n        .Add \"mode_dynamo_started\", Array(\"set_dynamo_phase:phase_name=(current_player.dynamo_phase)\")\n\n        ' Specify the type of dynamic values\n        .Add \"mode_dynamo_started\", Array(\"set_dynamo_round:round_number=(device.counters.dynamo_rounds.value):type=int\")\n    End With\nEnd With\n</code></pre> <p>In this example: - The <code>set_environment_sounds</code> event will be dispatched with the argument <code>env_name=driving</code> - The <code>set_initial_laps_count</code> event will be dispatched with the argument <code>count=10</code> - The <code>set_dynamo_phase</code> event will be dispatched with the argument <code>phase_name</code> set to the value of <code>current_player.dynamo_phase</code> - The <code>set_dynamo_round</code> event will be dispatched with the argument <code>round_number</code> set to the value of <code>device.counters.dynamo_rounds.value</code> as an integer</p>"},{"location":"tutorial/tutorial-event-player/#event-priority","title":"Event Priority","text":"<p>You can specify the priority of events to control the order in which they are dispatched:</p> <pre><code>' Event priority\nWith CreateGlfMode(\"dynamo\", 30)\n    .StartEvents = Array(\"mode_dynamo_started\")\n    .StopEvents = Array(\"mode_dynamo_stopped\")\n\n    With .EventPlayer\n        ' Reset player variable with high priority\n        .Add \"mode_dynamo_started\", Array(\"reset_pv_tokens_collected_to_0:priority=50\")\n\n        ' Play slide with lower priority (after the player variable is reset)\n        .Add \"mode_dynamo_started\", Array(\"play_slide{current_player.pv_tokens_collected &lt;= 5}:priority=5:slide=dynamo_collect_more_tokens_slide\")\n    End With\nEnd With\n</code></pre> <p>In this example: - The <code>reset_pv_tokens_collected_to_0</code> event will be dispatched with a priority of 50 - The <code>play_slide</code> event will be dispatched with a priority of 5, ensuring it happens after the player variable is reset</p>"},{"location":"tutorial/tutorial-event-player/#practical-example-multiball-mode","title":"Practical Example: Multiball Mode","text":"<p>Let's put it all together with a practical example for a multiball mode:</p> <pre><code>' Multiball mode with event player\nWith CreateGlfMode(\"multiball\", 40)\n    .StartEvents = Array(\"multiball_start\")\n    .StopEvents = Array(\"multiball_end\", \"ball_lost\")\n\n    With .EventPlayer\n        ' When multiball starts, enable all flippers and autofire coils\n        .Add \"multiball_start\", Array(\"cmd_flippers_enable\", \"cmd_autofire_coils_enable\")\n\n        ' Play a show based on the current multiball phase\n        .Add \"multiball_start\", Array(\"play_show_multiball_phase_(current_player.multiball_phase)\")\n\n        ' Set the jackpot value based on the number of balls in play\n        .Add \"multiball_start\", Array(\"set_jackpot_value:value=(1000 * device.ball_devices.playfield.balls):type=int\")\n\n        ' When a jackpot is collected, increase the player's score and play a show\n        .Add \"jackpot_collected\", Array(\"add_score:points=(current_player.jackpot_value)\", \"play_show_jackpot_collected\")\n\n        ' When multiball ends, disable all flippers and autofire coils\n        .Add \"multiball_end\", Array(\"cmd_flippers_disable\", \"cmd_autofire_coils_disable\")\n\n        ' When a ball is lost during multiball, check if multiball should end\n        .Add \"ball_lost{device.ball_devices.playfield.balls &lt;= 1}\", Array(\"multiball_end\")\n    End With\nEnd With\n</code></pre> <p>This example demonstrates: - Basic event playing with multiple response events - Dynamic event names based on player variables - Dynamic event arguments with type specification - Conditional event playing based on device state - Event priority for controlling the order of operations</p>"},{"location":"tutorial/tutorial-event-player/#conclusion","title":"Conclusion","text":"<p>The Event Player is a versatile and powerful component that can simplify your game logic and make your code more maintainable. By using the Event Player, you can:</p> <ol> <li>Create reusable event patterns</li> <li>Respond to game events with multiple actions</li> <li>Create conditional event chains based on game conditions</li> <li>Use dynamic values in event names and arguments</li> <li>Control the priority of event dispatch</li> </ol> <p>Remember that the Event Player is managed within the context of a mode, so you can have different event player configurations for different modes. This allows you to create complex and sophisticated game logic with minimal code. </p>"},{"location":"tutorial/tutorial-flippers/","title":"Tutorial - Flippers","text":"<p>See Flipper Config Reference</p>"},{"location":"tutorial/tutorial-flippers/#introduction","title":"Introduction","text":"<p>Flippers are a critical component of any pinball machine. This tutorial will guide you through the setup, configuration, and advanced customization of flippers in your system.</p>"},{"location":"tutorial/tutorial-flippers/#configuration","title":"Configuration","text":"<p>To configure your flippers, add the following code to the <code>ConfigureGlfDevices</code> subroutine:</p> <pre><code>Sub ConfigureGlfDevices\n\n    ' Flippers\n    With CreateGlfFlipper(\"left\")\n        .Switch = \"s_left_flipper\"\n        .ActionCallback = \"LeftFlipperAction\"\n        .DisableEvents = Array(\"kill_flippers\")\n        .EnableEvents = Array(\"ball_started\", \"enable_flippers\")\n    End With\n\n    With CreateGlfFlipper(\"right\")\n        .Switch = \"s_right_flipper\"\n        .ActionCallback = \"RightFlipperAction\"\n        .DisableEvents = Array(\"kill_flippers\")\n        .EnableEvents = Array(\"ball_started\", \"enable_flippers\")\n    End With\n\nEnd Sub\n</code></pre> <p>Your action callback could look like this:</p> <pre><code>Sub LeftFlipperAction(Enabled)\n    If Enabled Then\n        LeftFlipper.RotateToEnd\n    Else\n        LeftFlipper.RotateToStart\n    End If\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-lights/","title":"Tutorial - Lights","text":"<p>Now that we have a basic game life cycle, we can introduce some lights management to our table. We are going to setup a light player for the GI so that it turns on when the ball starts and off when the ball ends.</p> <p>The light player is used to turn lights on and off when events happen. It inherits the priority of the mode its assigned to. For more information check out the Light Player command reference</p> <p></p>"},{"location":"tutorial/tutorial-lights/#light-tags","title":"Light Tags","text":"<p>Lights can be grouped together using tags. This makes it easy to change the state of many lights all at the same time. In this example we will assign all our GI (General Illumination) lights with the tag GI.</p> <p>To do this in the vpx editor we are going to borrow the BlinkPattern property of the light object to hold our tag names. Select all of your GI lights, and under BlinkPattern type <code>GI</code>. You can add more tags to a light using a csv format, for example <code>GI,SLING_GI</code></p>"},{"location":"tutorial/tutorial-lights/#add-lights-to-glf","title":"Add Lights to GLF","text":"<p>To allow the GLF to control your lights you need to add them to the glf_lights collection you created during the getting started guide. In VPX open your collection manager and add all your lights to glf_lights.</p>"},{"location":"tutorial/tutorial-lights/#light-player-configuration","title":"Light Player Configuration","text":"<p>To control your lights you need a to use a <code>LightPlayer</code>. You also need a mode to contain your light player. Add the following configuration to your script</p> <pre><code>Public Sub CreateGIMode()\n\n    With CreateGlfMode(\"gi_control\", 1000)\n        .StartEvents = Array(\"ball_started\")\n        .StopEvents = Array(\"ball_ended\") \n        With .LightPlayer()\n            With .EventName(\"mode_gi_control_started\")\n                With .Lights(\"GI\")\n                    .Color = \"ffffff\"\n                End With\n            End With\n        End With\n    End With\n\nEnd Sub\n\n</code></pre> <p>Lets step through the mode config. We create a new mode called gi_control, the mode will start when the ball_started event is posted by the system and will end when the ball_ended event is posted. We setup a light player within this mode that listens for the mode started event and changes the GI lights to white color.</p> <p>We now need to include this mode in our game. To do that, in your ConfigureGlfDevices sub add the following</p> <pre><code>    Sub ConfigureGlfDevices\n\n        ' Plunger\n        With CreateGlfBallDevice(\"plunger\")\n            .BallSwitches = Array(\"sw01\")\n            .EjectTimeout = 2000\n            .MechanicalEject = True\n            .DefaultDevice = True\n            .EjectCallback = \"PlungerEjectCallback\"\n        End With\n\n        CreateGIMode() '&lt;---Add this to enable the mode\n\n        'Other device config....\n    End Sub\n</code></pre>"},{"location":"tutorial/tutorial-lights/#next-steps","title":"Next Steps","text":"<p>Setting up your ball devices</p>"},{"location":"tutorial/tutorial-plunger/","title":"Tutorial - Plunger","text":"<p>The plunger is a ball device which holds a ball until either the plunger is pulled back and released or a button is pressed to launch the ball.  It is the default ball device that is used to get balls onto the playfield.</p>"},{"location":"tutorial/tutorial-plunger/#setup","title":"Setup","text":"<p>To setup your plunger, you'll need a switch that is positioned so that the ball is resting on it whilst in the plunger lane.</p> <p></p> <p>In the example we have named the switch sw01.</p>"},{"location":"tutorial/tutorial-plunger/#configuration","title":"Configuration","text":"<p>To configure your plunger device add the code below to your Configure Glf Devices Sub.</p> <pre><code>Sub ConfigureGlfDevices\n\n    ' Plunger\n    With CreateGlfBallDevice(\"plunger\")\n        .BallSwitches = Array(\"sw01\")\n        .EjectTimeout = 2000\n        .MechanicalEject = True\n        .DefaultDevice = True\n        .EjectCallback = \"PlungerEjectCallback\"\n    End With\n\nEnd Sub\n</code></pre> <p>The above configuration sets up the plunger as a mechcanical plunger, meaning the ball won't automatically fire out of the plunger lane, you will have to pull and release the plunger to fire it. We have also set the ball device as the default device (this is the ball device which recieves a ball from the trough). The eject timeout setting tells the device how long to wait until deeming the ball successfully exited the device, e.g. If the ball didn't reach the end of the plunger lane and fell back within 2 seconds, the ball would not have exited successfully.</p>"},{"location":"tutorial/tutorial-plunger/#next-steps","title":"Next Steps","text":"<p>Setting up your lights</p>"},{"location":"tutorial/tutorial-scoring/","title":"Tutorial - Scoring","text":"<p>Let's add scoring to our pinball table. Scoring is a fundamental part of any pinball game, allowing players to track their progress and compete for high scores.</p>"},{"location":"tutorial/tutorial-scoring/#configuration","title":"Configuration","text":"<p>To configure scoring in your game, we need to set up a variable player that will handle score tracking. The variable player allows you to define variables that can be modified by events, such as adding points when certain actions occur.</p>"},{"location":"tutorial/tutorial-scoring/#score-configuration","title":"Score Configuration","text":"<p>Create the following configuration to set up a scoring system:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Add scoring configuration\n        With VariablePlayer(\"base\")\n\n            ' Define events that will add points to the score\n            With .EventName(\"add_score_1000\")\n                With .Variable(\"score\")\n                    .Action = \"add\"\n                    .Int = 1000\n                End With\n            End With\n\n            ' Add more scoring events for different actions\n            With .EventName(\"add_score_500\")\n                With .Variable(\"score\")\n                    .Action = \"add\"\n                    .Int = 500\n                End With\n            End With\n\n            With .EventName(\"add_score_100\")\n                With .Variable(\"score\")\n                    .Action = \"add\"\n                    .Int = 100\n                End With\n            End With\n        End With\n\n    End With\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-scoring/#advanced-scoring-features","title":"Advanced Scoring Features","text":""},{"location":"tutorial/tutorial-scoring/#bonus-scoring","title":"Bonus Scoring","text":"<p>You can implement bonus scoring that increases based on player performance:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        With VariablePlayer(\"base\")\n            ' Define a bonus multiplier variable\n            With .Variable(\"bonus_multiplier\")\n                .InitialValue = 1\n            End With\n\n            ' Event to increase the bonus multiplier\n            With .EventName(\"increase_bonus\")\n                With .Variable(\"bonus_multiplier\")\n                    .Action = \"add\"\n                    .Int = 1\n                End With\n            End With\n\n            ' Event to add bonus points (multiplied by the current multiplier)\n            With .EventName(\"add_bonus_points\")\n                With .Variable(\"score\")\n                    .Action = \"add\"\n                    .Expression = \"1000 * current_player.bonus_multiplier\"\n                End With\n            End With\n        End With\n    End With\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-shots/","title":"Tutorial - Shots","text":"<p>Let's add shots to our pinball table. Shots are the primary interactive elements that players can hit to score points and trigger game events. In this tutorial, we'll learn how to configure shots, shot profiles, and shot groups.</p>"},{"location":"tutorial/tutorial-shots/#what-are-shots","title":"What are Shots?","text":"<p>In pinball, a \"shot\" is a switch (or combination of switches) that the player shoots for. Examples include:</p> <ul> <li>A standup target, drop target, or rollover lane</li> <li>A ramp, loop, or orbit</li> <li>A toy, subway, or VUK (Vertical Up Kicker)</li> </ul> <p>Most shots have lights or LEDs associated with them which are on, off, flashing, and/or certain colors to reflect what \"state\" the shot is in.</p>"},{"location":"tutorial/tutorial-shots/#shot-configuration","title":"Shot Configuration","text":""},{"location":"tutorial/tutorial-shots/#basic-shot-setup","title":"Basic Shot Setup","text":"<p>First, let's create a basic shot configuration:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Configure a basic shot\n        With .Shot(\"left_ramp\")\n            .Switch = \"sw_left_ramp\"\n            .Profile = \"ramp_profile\"\n        End With\n    End With\nEnd Sub\n</code></pre> <p>This configuration: 1. Creates a shot called \"left_ramp\" in the \"base\" mode 2. Configures it to be triggered by the \"sw_left_ramp\" switch 3. Uses the \"ramp_profile\" shot profile to define its behavior</p>"},{"location":"tutorial/tutorial-shots/#shot-profiles","title":"Shot Profiles","text":"<p>Before we can use a shot profile, we need to define it. Shot profiles define how shots behave, including their states and visual effects:</p> <pre><code>Sub CreateShotProfiles()\n    ' Create a basic ramp profile\n    With CreateGlfShotProfile(\"ramp_profile\")\n        ' Configure basic settings\n        .AdvanceOnHit = True\n        .Block = False\n        .ProfileLoop = False\n\n        ' Configure states\n        With .States(\"unlit\")\n            .Show = \"off\"\n            .Key = \"key_ramp_unlit\"\n        End With\n\n        With .States(\"flashing\")\n            .Show = \"flash\"\n            .Key = \"key_ramp_flashing\"\n            With .Tokens\n                .Add \"color\", \"yellow\"\n            End With\n        End With\n\n        With .States(\"lit\")\n            .Show = \"on\"\n            .Key = \"key_ramp_lit\"\n            With .Tokens\n                .Add \"color\", \"red\"\n            End With\n        End With\n    End With\nEnd Sub\n</code></pre> <p>This profile defines three states for the shot: 1. \"unlit\" - The shot is off 2. \"flashing\" - The shot is flashing yellow 3. \"lit\" - The shot is on with a red color (final state)</p>"},{"location":"tutorial/tutorial-shots/#advanced-shot-configuration","title":"Advanced Shot Configuration","text":"<p>Now let's create a more advanced shot configuration:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Configure an advanced shot\n        With .Shot(\"jackpot\")\n            ' Configure switches\n            .Switches = Array(\"sw_left_ramp\", \"sw_right_ramp\", \"sw_center_ramp\")\n\n            ' Configure profile\n            .Profile = \"jackpot_profile\"\n\n            ' Configure enable events\n            .EnableEvents = Array(\"multiball_start\")\n\n            ' Configure disable events\n            .DisableEvents = Array(\"multiball_end\", \"ball_lost\")\n\n            ' Configure hit events\n            .HitEvents = Array(\"add_score_1000\")\n\n            ' Configure show tokens\n            With .Tokens\n                .Add \"color\", \"red\"\n            End With\n\n            ' Configure start enabled\n            .StartEnabled = True\n\n            ' Configure persist\n            .Persist = True\n        End With\n    End With\nEnd Sub\n</code></pre> <p>This advanced configuration: 1. Creates a shot called \"jackpot\" that can be triggered by any of three switches 2. Uses the \"jackpot_profile\" shot profile 3. Enables the shot when \"multiball_start\" event occurs 4. Disables the shot when \"multiball_end\" or \"ball_lost\" events occur 5. Adds 1000 points when the shot is hit 6. Passes custom tokens to the show 7. Starts enabled 8. Persists its state between balls</p>"},{"location":"tutorial/tutorial-shots/#shot-groups","title":"Shot Groups","text":"<p>Shot groups allow you to manage multiple shots together. For example, you might want to track when all shots in a group reach a certain state:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Configure shot group\n        With .ShotGroup(\"ramps\")\n            .Shots = Array(\"left_ramp\", \"right_ramp\", \"center_ramp\")\n            .CompleteEvents = Array(\"all_ramps_complete\")\n        End With\n    End With\nEnd Sub\n</code></pre> <p>This configuration: 1. Creates a shot group called \"ramps\" that includes three shots 2. Triggers the \"all_ramps_complete\" event when all shots in the group reach their final state</p>"},{"location":"tutorial/tutorial-shots/#shot-states-and-events","title":"Shot States and Events","text":"<p>Shots can be in different states, and the system generates events when shots change state:</p> <ul> <li><code>shot_name_hit</code>: Fired when the shot is hit</li> <li><code>shot_name_profile_hit</code>: Fired when the shot is hit with the profile name</li> <li><code>shot_name_profile_state_hit</code>: Fired when the shot is hit with the profile name and state</li> <li><code>shot_name_state_hit</code>: Fired when the shot is hit with the state name</li> </ul> <p>You can use these events to trigger scores, achievements, shows, etc.</p>"},{"location":"tutorial/tutorial-shots/#mode-specific-shot-behavior","title":"Mode-Specific Shot Behavior","text":"<p>Shots can behave differently in different modes. For example, a ramp shot might score 1,000 points in the base mode, but score a jackpot in the multiball mode:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Configure a shot in the base mode\n        With .Shot(\"left_ramp\")\n            .Switch = \"sw_left_ramp\"\n            .Profile = \"ramp_profile\"\n            .HitEvents = Array(\"add_score_1000\")\n        End With\n    End With\nEnd Sub\n\nSub CreateMultiballMode()\n    With CreateGlfMode(\"multiball\", 2000)\n        ' Configure the same shot in the multiball mode\n        With .Shot(\"left_ramp_multiball\")\n            .Switch = \"sw_left_ramp\"\n            .Profile = \"jackpot_profile\"\n            .HitEvents = Array(\"add_score_10000\", \"jackpot_collected\")\n        End With\n    End With\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-shots/#sequence-shots","title":"Sequence Shots","text":"<p>You can also configure shots that are only considered to be hit based on a series of switches that must be hit in the right order within a certain time frame:</p> <pre><code>Sub CreateBaseMode()\n    With CreateGlfMode(\"base\", 1000)\n        ' Configure a sequence shot\n        With .SequenceShot(\"orbit_left\")\n            .Switches = Array(\"sw_orbit_left\", \"sw_orbit_center\", \"sw_orbit_right\")\n            .TimeWindow = 3000  ' 3 seconds\n            .HitEvents = Array(\"add_score_5000\")\n        End With\n\n        With .SequenceShot(\"orbit_right\")\n            .Switches = Array(\"sw_orbit_right\", \"sw_orbit_center\", \"sw_orbit_left\")\n            .TimeWindow = 3000  ' 3 seconds\n            .HitEvents = Array(\"add_score_5000\")\n        End With\n    End With\nEnd Sub\n</code></pre> <p>This configuration: 1. Creates two sequence shots that use the same switches but in different orders 2. Sets a 3-second time window for the sequence to be completed 3. Adds 5,000 points when the sequence is completed</p>"},{"location":"tutorial/tutorial-shots/#enabling-the-modes","title":"Enabling the Modes","text":"<p>Finally, we need to enable these modes in our game by calling the appropriate subs in our <code>ConfigureGlfDevices</code> Sub:</p> <pre><code>Sub ConfigureGlfDevices\n    CreateShotProfiles()  ' Create shot profiles\n    CreateBaseMode()      ' Create base mode with shots\n    CreateMultiballMode() ' Create multiball mode with shots\n\n    'Other device config....\nEnd Sub\n</code></pre>"},{"location":"tutorial/tutorial-shots/#conclusion","title":"Conclusion","text":"<p>With these configurations, you now have a comprehensive shot system for your pinball game. You can:</p> <ol> <li>Create basic and advanced shots</li> <li>Define shot profiles with different states and visual effects</li> <li>Group shots together for collective behavior</li> <li>Configure mode-specific shot behavior</li> <li>Create sequence shots for complex interactions</li> </ol>"},{"location":"tutorial/tutorial-timer/","title":"Timer Tutorial","text":"<p>Timers are essential for creating time-based events in your pinball game, such as mode durations, countdowns, and timed opportunities. The timer in the VPX Game Logic Framework is flexible and can be configured to count up or down, trigger events, and be controlled by other events.</p>"},{"location":"tutorial/tutorial-timer/#what-is-a-timer","title":"What is a Timer?","text":"<p>A timer is a component that counts up or down from a specified value, firing events as it runs. You can use timers to: - Create time-limited modes (e.g., \"Complete the objective in 30 seconds!\") - Track elapsed time for scoring or achievements - Add urgency to gameplay</p>"},{"location":"tutorial/tutorial-timer/#basic-timer-configuration","title":"Basic Timer Configuration","text":"<p>Here is a straightforward example of how to configure a timer for a \"hurry up\" mode:</p> <pre><code>With CreateGlfMode(\"hurry_up\", 10)\n    .StartEvents = Array(\"hurry_up_start\")\n    .StopEvents = Array(\"timer_hurry_up_complete\")\n\n    With .Timer(\"hurry_up_timer\")\n        .StartRunning = True\n        .Direction = \"down\"      ' Count down\n        .StartValue = 15         ' Start at 15\n        .EndValue = 0            ' End at 0\n        .TickInterval = 1000     ' Tick every 1 second (1000 ms)\n    End With\nEnd With\n</code></pre> <p>How it works: - The timer is named <code>hurry_up_timer</code> and is part of the <code>hurry_up</code> mode. - The mode starts when the <code>hurry_up_start</code> event occurs and stops when the timer completes (<code>timer_hurry_up_complete</code>). - The timer starts running immediately, counts down from 15 to 0, ticking every second. - When the timer reaches 0, it automatically fires a <code>timer_hurry_up_complete</code> event, which ends the mode.</p>"},{"location":"tutorial/tutorial-timer/#timer-events","title":"Timer Events","text":"<p>Timers automatically generate events you can use in your game logic: - <code>&lt;timer_name&gt;_started</code> \u2014 when the timer starts - <code>&lt;timer_name&gt;_stopped</code> \u2014 when the timer stops - <code>&lt;timer_name&gt;_complete</code> \u2014 when the timer reaches its end value - <code>&lt;timer_name&gt;_tick</code> \u2014 on every tick</p> <p>You can use these events to trigger actions, such as ending a mode, playing a sound, or updating the display.</p>"},{"location":"tutorial/tutorial-timer/#controlling-the-timer","title":"Controlling the Timer","text":"<p>You can also control the timer using control events. For example, you can add time, pause, or change the tick interval dynamically by configuring <code>.ControlEvents</code>:</p> <pre><code>With .Timer(\"hurry_up_timer\")\n    ' ... basic config ...\n    With .ControlEvents\n        .EventName = \"add_time\"\n        .Action = \"add\"\n        .Value = 5000\n    End With\n    With .ControlEvents\n        .EventName = \"pause_timer\"\n        .Action = \"pause\"\n        .Value = 2000  ' Pause for 2 seconds\n    End With\nEnd With\n</code></pre> <ul> <li>Triggering the <code>add_time</code> event will add 5 to the timer.</li> <li>Triggering the <code>pause_timer</code> event will pause the timer for 2 seconds.</li> </ul>"},{"location":"tutorial/tutorial-timer/#summary","title":"Summary","text":"<ul> <li>Timers are configured inside a mode using <code>.Timer(\"name\")</code>.</li> <li>Set the direction, start/end values, and tick interval.</li> <li>Use events to start/stop the timer and respond to timer events.</li> <li>Use control events to dynamically modify the timer during gameplay.</li> </ul> <p>This covers the basics of using timers in your game. For more advanced usage, see the Timer Command Reference. </p>"},{"location":"tutorial/tutorial-trough/","title":"Tutorial 1 - Trough","text":"<p>The trough is special device that collects balls from the playfield when they drain and releases balls into the plunger lane. GLF supports upto an 8 ball \"physical\" trough. By physical we mean that the balls are never destroyed during a game. This leads to better ball tracking and physics simulation.</p> <p></p>"},{"location":"tutorial/tutorial-trough/#setup","title":"Setup","text":"<p>To setup your trough we need to create some blocker walls and trough kickers around the apron area.</p> <p></p> <p>The kicker switches need to named swTrough1 - swTrough7 plus a Drain kicker. swTrough1 switch being closest to the plunger lane and Drain being the kicker that collects the ball from the playfield.</p>"},{"location":"tutorial/tutorial-trough/#configuration","title":"Configuration","text":"<p>Include enough kickers to cover your games ball capacity. e.g. if your game takes 5 balls make swTrough1 - swTrough5 + Drain.</p>"},{"location":"tutorial/tutorial-trough/#next-steps","title":"Next Steps","text":"<p>Setting up your plunger</p>"}]}